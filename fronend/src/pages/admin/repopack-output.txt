This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-02-07T06:00:59.370Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/
  AdminEventsDashboard/
    index.js
  EventForm/
    BasicInformation.js
    DateTimeSection.js
    ExternalLinksSection.js
    index.js
    MediaSection.js
layout/
  AdminLayout/
    index.js
pages/
  DashboardPage/
    index.js
  EventCreatePage/
    index.js
  EventEditPage/
    index.js
  LoginPage/
    index.js
routes/
  index.js

================================================================
Repository Files
================================================================

================
File: components/AdminEventsDashboard/index.js
================
import React, { useState, useEffect } from 'react';
import { Calendar, Clock, MapPin, Plus, Pencil, Trash2, Search } from 'lucide-react';
import EventFormModal from '../EventForm';

const AdminEventsDashboard = () => {
  const [events, setEvents] = useState({ upcoming: [], past: [] });
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [activeTab, setActiveTab] = useState('upcoming');
  const [error, setError] = useState(null);

  const fetchEvents = async () => {
    try {
      setLoading(true);
      const response = await fetch('/events');
      if (!response.ok) {
        throw new Error('Failed to fetch events');
      }
      const data = await response.json();
      setEvents(data);
    } catch (error) {
      setError('Error loading events: ' + error.message);
      console.error('Error fetching events:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEvents();
  }, []);

  const handleCreateEvent = async (formData) => {
    try {
      const response = await fetch('/admin/events', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        throw new Error('Failed to create event');
      }

      await fetchEvents(); // Refresh the events list
      setIsCreateModalOpen(false);
    } catch (error) {
      setError('Error creating event: ' + error.message);
      console.error('Error creating event:', error);
    }
  };

  const handleUpdateEvent = async (eventId, formData) => {
    try {
      const response = await fetch(`/admin/events/${eventId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        throw new Error('Failed to update event');
      }

      await fetchEvents(); // Refresh the events list
      setIsEditModalOpen(false);
      setSelectedEvent(null);
    } catch (error) {
      setError('Error updating event: ' + error.message);
      console.error('Error updating event:', error);
    }
  };

  const handleDeleteEvent = async (eventId) => {
    if (!window.confirm('Are you sure you want to delete this event?')) {
      return;
    }

    try {
      const response = await fetch(`/admin/events/${eventId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to delete event');
      }

      await fetchEvents(); // Refresh the events list
    } catch (error) {
      setError('Error deleting event: ' + error.message);
      console.error('Error deleting event:', error);
    }
  };

  const filteredEvents = {
    upcoming: events.upcoming?.filter(event =>
      event.title.toLowerCase().includes(searchTerm.toLowerCase())
    ) || [],
    past: events.past?.filter(event =>
      event.title.toLowerCase().includes(searchTerm.toLowerCase())
    ) || []
  };

  const EventCard = ({ event, type }) => (
    <div className="bg-white rounded-lg shadow p-4 hover:shadow-md transition-shadow">
      <div className="flex justify-between items-start">
        <div className="space-y-2 flex-1">
          <h3 className="text-lg font-semibold text-gray-900">{event.title}</h3>
          
          <div className="space-y-1">
            <div className="flex items-center text-gray-600">
              <Calendar className="w-4 h-4 mr-2" />
              <span className="text-sm">
                {new Date(event.startTime).toLocaleDateString()}
              </span>
            </div>
            
            <div className="flex items-center text-gray-600">
              <Clock className="w-4 h-4 mr-2" />
              <span className="text-sm">
                {new Date(event.startTime).toLocaleTimeString()} - 
                {new Date(event.endTime).toLocaleTimeString()}
              </span>
            </div>
            
            <div className="flex items-center text-gray-600">
              <MapPin className="w-4 h-4 mr-2" />
              <span className="text-sm">{event.location}</span>
            </div>
          </div>

          {event.tags && event.tags.length > 0 && (
            <div className="flex flex-wrap gap-2 mt-2">
              {event.tags.map((tag, index) => (
                <span 
                  key={index}
                  className="px-2 py-1 bg-gray-100 text-gray-600 rounded-full text-xs"
                >
                  {tag}
                </span>
              ))}
            </div>
          )}
        </div>

        <div className="flex gap-2">
          <button
            onClick={() => {
              setSelectedEvent(event);
              setIsEditModalOpen(true);
            }}
            className="p-2 text-blue-600 hover:bg-blue-50 rounded-full"
            aria-label="Edit event"
          >
            <Pencil className="w-4 h-4" />
          </button>
          <button
            onClick={() => handleDeleteEvent(event.id)}
            className="p-2 text-red-600 hover:bg-red-50 rounded-full"
            aria-label="Delete event"
          >
            <Trash2 className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Event Management</h1>
          <p className="text-gray-600">Manage all your events in one place</p>
        </div>
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="flex items-center gap-2 bg-[#FFD200] text-[#2C2C2C] px-4 py-2 rounded-lg hover:bg-[#FFE566] transition-colors"
        >
          <Plus className="w-4 h-4" />
          Create Event
        </button>
      </div>

      {/* Error Message */}
      {error && (
        <div className="mb-4 p-4 bg-red-50 border-l-4 border-red-400 text-red-700">
          {error}
        </div>
      )}

      {/* Search and Filters */}
      <div className="mb-6">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Search events..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FFD200] focus:border-transparent"
          />
        </div>
      </div>

      {/* Tabs */}
      <div className="flex gap-4 mb-6 border-b">
        <button
          onClick={() => setActiveTab('upcoming')}
          className={`pb-2 px-1 ${
            activeTab === 'upcoming'
              ? 'border-b-2 border-[#FFD200] text-[#2C2C2C]'
              : 'text-gray-500'
          }`}
        >
          Upcoming Events ({filteredEvents.upcoming.length})
        </button>
        <button
          onClick={() => setActiveTab('past')}
          className={`pb-2 px-1 ${
            activeTab === 'past'
              ? 'border-b-2 border-[#FFD200] text-[#2C2C2C]'
              : 'text-gray-500'
          }`}
        >
          Past Events ({filteredEvents.past.length})
        </button>
      </div>

      {/* Event List */}
      {loading ? (
        <div className="text-center py-12">
          <div className="w-12 h-12 border-4 border-[#FFD200] border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading events...</p>
        </div>
      ) : (
        <div className="space-y-4">
          {activeTab === 'upcoming' ? (
            filteredEvents.upcoming.length > 0 ? (
              filteredEvents.upcoming.map(event => (
                <EventCard key={event.id} event={event} type="upcoming" />
              ))
            ) : (
              <p className="text-center text-gray-500 py-12">No upcoming events found</p>
            )
          ) : (
            filteredEvents.past.length > 0 ? (
              filteredEvents.past.map(event => (
                <EventCard key={event.id} event={event} type="past" />
              ))
            ) : (
              <p className="text-center text-gray-500 py-12">No past events found</p>
            )
          )}
        </div>
      )}

      {/* Create Event Modal */}
      <EventFormModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSubmit={handleCreateEvent}
      />

      {/* Edit Event Modal */}
      <EventFormModal
        isOpen={isEditModalOpen}
        onClose={() => {
          setIsEditModalOpen(false);
          setSelectedEvent(null);
        }}
        event={selectedEvent}
        onSubmit={(formData) => handleUpdateEvent(selectedEvent.id, formData)}
      />
    </div>
  );
};

export default AdminEventsDashboard;

================
File: components/EventForm/BasicInformation.js
================
import React from 'react';

const BasicInformation = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="space-y-4">
      {/* Title */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Title *
        </label>
        <input
          type="text"
          name="title"
          value={formData.title}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.title ? 'border-red-500' : ''
          }`}
        />
        {errors.title && (
          <p className="mt-1 text-sm text-red-600">{errors.title}</p>
        )}
      </div>

      {/* Subtitle */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Subtitle
        </label>
        <input
          type="text"
          name="subtitle"
          value={formData.subtitle}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
        />
      </div>

      {/* Location */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Location *
        </label>
        <input
          type="text"
          name="location"
          value={formData.location}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.location ? 'border-red-500' : ''
          }`}
        />
        {errors.location && (
          <p className="mt-1 text-sm text-red-600">{errors.location}</p>
        )}
      </div>

      {/* Description */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          name="description"
          rows="4"
          value={formData.description}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="Enter event description..."
        />
      </div>
    </div>
  );
};

export default BasicInformation;

================
File: components/EventForm/DateTimeSection.js
================
import React from 'react';

const DateTimeSection = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
      {/* Start Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Start Time *
        </label>
        <input
          type="datetime-local"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.startTime ? 'border-red-500' : ''
          }`}
        />
        {errors.startTime && (
          <p className="mt-1 text-sm text-red-600">{errors.startTime}</p>
        )}
      </div>

      {/* End Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          End Time *
        </label>
        <input
          type="datetime-local"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.endTime ? 'border-red-500' : ''
          }`}
        />
        {errors.endTime && (
          <p className="mt-1 text-sm text-red-600">{errors.endTime}</p>
        )}
      </div>
    </div>
  );
};

export default DateTimeSection;

================
File: components/EventForm/ExternalLinksSection.js
================
import React from 'react';
import { Plus, Trash2 } from 'lucide-react';

const ExternalLinksSection = ({ formData, setFormData }) => {
  const handleLinkChange = (type, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        [type]: {
          ...prev.links[type],
          [field]: value
        }
      }
    }));
  };

  const handleAddAdditionalLink = () => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: [
          ...prev.links.additionalInfo,
          { title: '', url: '' }
        ]
      }
    }));
  };

  const handleAdditionalLinkChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: prev.links.additionalInfo.map((link, i) => 
          i === index ? { ...link, [field]: value } : link
        )
      }
    }));
  };

  const handleRemoveAdditionalLink = (index) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: prev.links.additionalInfo.filter((_, i) => i !== index)
      }
    }));
  };

  return (
    <div className="space-y-4">
      <h4 className="text-lg font-medium text-gray-900">External Links</h4>
      
      {/* Registration Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration Link Title
          </label>
          <input
            type="text"
            value={formData.links.registration.title}
            onChange={(e) => handleLinkChange('registration', 'title', e.target.value)}
            placeholder="E.g., Register Now"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration URL
          </label>
          <input
            type="url"
            value={formData.links.registration.url}
            onChange={(e) => handleLinkChange('registration', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Location Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Location Link Title
          </label>
          <input
            type="text"
            value={formData.links.location.title}
            onChange={(e) => handleLinkChange('location', 'title', e.target.value)}
            placeholder="E.g., View on Map"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Location URL
          </label>
          <input
            type="url"
            value={formData.links.location.url}
            onChange={(e) => handleLinkChange('location', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Additional Links */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h5 className="text-sm font-medium text-gray-700">Additional Links</h5>
          <button
            type="button"
            onClick={handleAddAdditionalLink}
            className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4 mr-1" />
            Add Link
          </button>
        </div>

        {formData.links.additionalInfo.map((link, index) => (
          <div key={index} className="grid grid-cols-2 gap-4 relative">
            <div>
              <input
                type="text"
                value={link.title}
                onChange={(e) => handleAdditionalLinkChange(index, 'title', e.target.value)}
                placeholder="Link Title"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
            </div>
            <div className="flex gap-2">
              <input
                type="url"
                value={link.url}
                onChange={(e) => handleAdditionalLinkChange(index, 'url', e.target.value)}
                placeholder="https://"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemoveAdditionalLink(index)}
                className="mt-1 p-2 text-red-600 hover:bg-red-50 rounded-md"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ExternalLinksSection;

================
File: components/EventForm/index.js
================
import React, { useState, useEffect, useMemo } from 'react';
import BasicInformation from './BasicInformation';
import DateTimeSection from './DateTimeSection';
import MediaSection from './MediaSection';
import ExternalLinksSection from './ExternalLinksSection';
import { X } from 'lucide-react';

const EventFormModal = ({ isOpen, onClose, event = null, onSubmit }) => {
  // 使用 useMemo 来记忆 initialFormState
  const initialFormState = useMemo(() => ({
    title: '',
    subtitle: '',
    description: '',
    location: '',
    startTime: '',
    endTime: '',
    mainPicture: '',
    pictures: [],
    tags: [],
    video: '',
    links: {
      registration: { title: '', url: '' },
      location: { title: '', url: '' },
      additionalInfo: []
    }
  }), []); // 空依赖数组，因为这个对象不需要变化

  const [formData, setFormData] = useState(initialFormState);
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (event) {
      const formattedEvent = {
        ...event,
        startTime: formatDateTimeForInput(event.startTime),
        endTime: formatDateTimeForInput(event.endTime),
        tags: event.tags || [],
        pictures: event.pictures || [],
        links: event.links || initialFormState.links
      };
      setFormData(formattedEvent);
    } else {
      setFormData(initialFormState);
    }
  }, [event, isOpen, initialFormState]); // 添加 initialFormState 作为依赖

  const formatDateTimeForInput = (dateTimeStr) => {
    if (!dateTimeStr) return '';
    const date = new Date(dateTimeStr);
    return date.toISOString().slice(0, 16);
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.title) newErrors.title = 'Title is required';
    if (!formData.startTime) newErrors.startTime = 'Start time is required';
    if (!formData.endTime) newErrors.endTime = 'End time is required';
    if (!formData.location) newErrors.location = 'Location is required';
    if (new Date(formData.endTime) <= new Date(formData.startTime)) {
      newErrors.endTime = 'End time must be after start time';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const submitData = {
        ...formData,
        startTime: new Date(formData.startTime).toISOString(),
        endTime: new Date(formData.endTime).toISOString()
      };

      // Clean up empty links
      const cleanedLinks = {
        ...(submitData.links.registration?.url && {
          registration: submitData.links.registration
        }),
        ...(submitData.links.location?.url && {
          location: submitData.links.location
        }),
        additionalInfo: submitData.links.additionalInfo.filter(
          link => link.title && link.url
        )
      };

      submitData.links = cleanedLinks;
      await onSubmit(submitData);
      onClose();
    } catch (error) {
      console.error('Error submitting event:', error);
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          onClick={onClose}
        />

        {/* Modal Panel */}
        <div className="relative inline-block bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-2xl sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            {/* Close Button */}
            <div className="absolute top-0 right-0 pt-4 pr-4">
              <button
                onClick={onClose}
                className="bg-white rounded-md text-gray-400 hover:text-gray-500"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
              {event ? 'Edit Event' : 'Create New Event'}
            </h3>

            <form onSubmit={handleSubmit} className="space-y-4">
              <BasicInformation
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />
              
              <DateTimeSection
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />

              <MediaSection
                formData={formData}
                setFormData={setFormData}
              />

              <ExternalLinksSection
                formData={formData}
                setFormData={setFormData}
              />

              {/* Form Actions */}
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="inline-flex justify-center px-4 py-2 text-sm font-medium text-[#2C2C2C] bg-[#FFD200] border border-transparent rounded-md hover:bg-[#FFE566] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#FFD200] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-[#2C2C2C]"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        />
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        />
                      </svg>
                      {event ? 'Updating...' : 'Creating...'}
                    </>
                  ) : (
                    event ? 'Update Event' : 'Create Event'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventFormModal;

================
File: components/EventForm/MediaSection.js
================
import React, { useState } from 'react';
import { Plus, Trash2, X } from 'lucide-react';

const MediaSection = ({ formData, setFormData }) => {
  const [newPictureUrl, setNewPictureUrl] = useState('');
  const [newTag, setNewTag] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAddPicture = () => {
    if (newPictureUrl.trim()) {
      setFormData(prev => ({
        ...prev,
        pictures: [...prev.pictures, newPictureUrl.trim()]
      }));
      setNewPictureUrl('');
    }
  };

  const handleRemovePicture = (index) => {
    setFormData(prev => ({
      ...prev,
      pictures: prev.pictures.filter((_, i) => i !== index)
    }));
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const handleKeyPress = (e, action) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      action();
    }
  };

  return (
    <div className="space-y-4">
      {/* Main Picture URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Main Picture URL
        </label>
        <input
          type="url"
          name="mainPicture"
          value={formData.mainPicture}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>

      {/* Additional Pictures */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Additional Pictures
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="url"
            value={newPictureUrl}
            onChange={(e) => setNewPictureUrl(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddPicture)}
            placeholder="Enter picture URL"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddPicture}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 space-y-2">
          {formData.pictures.map((url, index) => (
            <div key={index} className="flex items-center space-x-2">
              <input
                type="text"
                value={url}
                readOnly
                className="flex-1 rounded-md border-gray-300 bg-gray-50 sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemovePicture(index)}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Tags */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Tags
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="text"
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddTag)}
            placeholder="Enter tag"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddTag}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 flex flex-wrap gap-2">
          {formData.tags.map((tag) => (
            <span
              key={tag}
              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
            >
              {tag}
              <button
                type="button"
                onClick={() => handleRemoveTag(tag)}
                className="ml-1 text-gray-400 hover:text-gray-600"
              >
                <X className="h-3 w-3" />
              </button>
            </span>
          ))}
        </div>
      </div>

      {/* Video URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Video URL
        </label>
        <input
          type="url"
          name="video"
          value={formData.video}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>
    </div>
  );
};

export default MediaSection;

================
File: layout/AdminLayout/index.js
================
// src/pages/admin/layout/AdminLayout/index.js
import React from 'react';
import { useLocation } from 'react-router-dom';

const AdminLayout = ({ children }) => {
  const location = useLocation();

  // 登录页面不需要使用Admin布局
  if (location.pathname === '/admin/login') {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {children}
    </div>
  );
};

export default AdminLayout;

================
File: pages/DashboardPage/index.js
================
import React from 'react';
import { useAuth } from '../../../../context/AuthContext';
import AdminEventsDashboard from '../../components/AdminEventsDashboard';


const DashboardPage = () => {
  const { user, logout } = useAuth();

  const handleLogout = () => {
    logout();
  };

  return (
    <div className="min-h-screen bg-[#FAF6F0]">
      <div className="p-4 bg-white shadow-sm mb-6">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div>
            <h1 className="text-xl font-bold text-[#2C2C2C]">Admin Dashboard</h1>
            <p className="text-sm text-gray-600">Welcome, {user?.username}</p>
          </div>
          <button
            onClick={handleLogout}
            className="px-4 py-2 bg-[#FFD200] text-[#2C2C2C] rounded-lg hover:bg-[#FFE566] transition-colors"
          >
            Logout
          </button>
        </div>
      </div>

      <AdminEventsDashboard />
    </div>
  );
};

export default DashboardPage;

================
File: pages/EventCreatePage/index.js
================
// src/pages/admin/pages/EventCreatePage/index.js
import React from 'react';
import EventForm from '../../components/EventForm';

const EventCreatePage = () => {
  return <EventForm />;
};

export default EventCreatePage;

================
File: pages/EventEditPage/index.js
================
// src/pages/admin/pages/EventEditPage/index.js
import React from 'react';
import EventForm from '../../components/EventForm';

const EventEditPage = () => {
  return <EventForm />;
};

export default EventEditPage;

================
File: pages/LoginPage/index.js
================
// src/pages/admin/pages/LoginPage/index.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../../../context/AuthContext';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { login, error: authError, isAuthenticated } = useAuth();

  useEffect(() => {
    if (isAuthenticated) {
      navigate('/admin/dashboard');
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await login(credentials.username, credentials.password);
      navigate('/admin/dashboard');
    } catch (error) {
      console.error('Login error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#FAF6F0] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-sm">
        <div>
          <img
            src={process.env.PUBLIC_URL + "/images/Game-mixer-logo.avif"}
            alt="Game Mixer Logo"
            className="mx-auto h-16 w-16 p-2 bg-[#FFD200] rounded-lg"
          />
          <h2 className="mt-6 text-center text-3xl font-bold text-[#2C2C2C]">
            Admin Login
          </h2>
        </div>

        {authError && (
          <div className="bg-red-50 border-l-4 border-red-400 p-4">
            <div className="flex">
              <div className="ml-3">
                <p className="text-sm text-red-700">
                  {authError}
                </p>
              </div>
            </div>
          </div>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-[#2C2C2C]">
                Username
              </label>
              <input
                id="username"
                name="username"
                type="text"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md 
                         shadow-sm focus:outline-none focus:ring-[#FFD200] focus:border-[#FFD200]
                         text-[#2C2C2C]"
                value={credentials.username}
                onChange={handleChange}
                disabled={loading}
              />
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-[#2C2C2C]">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md 
                         shadow-sm focus:outline-none focus:ring-[#FFD200] focus:border-[#FFD200]
                         text-[#2C2C2C]"
                value={credentials.password}
                onChange={handleChange}
                disabled={loading}
              />
            </div>
          </div>

          <button
            type="submit"
            disabled={loading}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md
                     shadow-sm text-[#2C2C2C] font-medium bg-[#FFD200] 
                     hover:bg-[#FFE566] focus:outline-none focus:ring-2 
                     focus:ring-offset-2 focus:ring-[#FFD200] transition-colors
                     ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {loading ? 'Signing in...' : 'Sign in'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;

================
File: routes/index.js
================
// src/pages/admin/routes/index.js
import React from 'react';
import { Route } from 'react-router-dom';
import AdminLayout from '../layout/AdminLayout';
import DashboardPage from '../pages/DashboardPage';
import EventEditPage from '../pages/EventEditPage';
import EventCreatePage from '../pages/EventCreatePage';
import LoginPage from '../pages/LoginPage';

export const adminRoutes = [
  <Route key="admin" path="/admin" element={<AdminLayout />}>
    <Route path="login" element={<LoginPage />} />
    <Route path="dashboard" element={<DashboardPage />} />
    <Route path="events/new" element={<EventCreatePage />} />
    <Route path="events/edit/:eventId" element={<EventEditPage />} />
  </Route>
];
