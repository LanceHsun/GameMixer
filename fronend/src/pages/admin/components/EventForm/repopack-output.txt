This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-02-09T00:15:08.878Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
BasicInformation.js
DateTimeSection.js
ExternalLinksSection.js
index.js
MediaSection.js

================================================================
Repository Files
================================================================

================
File: BasicInformation.js
================
import React from 'react';

const BasicInformation = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="space-y-4">
      {/* Title */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Title *
        </label>
        <input
          type="text"
          name="title"
          value={formData.title}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.title ? 'border-red-500' : ''
          }`}
        />
        {errors.title && (
          <p className="mt-1 text-sm text-red-600">{errors.title}</p>
        )}
      </div>

      {/* Subtitle */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Subtitle
        </label>
        <input
          type="text"
          name="subtitle"
          value={formData.subtitle}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
        />
      </div>

      {/* Location */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Location *
        </label>
        <input
          type="text"
          name="location"
          value={formData.location}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.location ? 'border-red-500' : ''
          }`}
        />
        {errors.location && (
          <p className="mt-1 text-sm text-red-600">{errors.location}</p>
        )}
      </div>

      {/* Description */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          name="description"
          rows="4"
          value={formData.description}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="Enter event description..."
        />
      </div>
    </div>
  );
};

export default BasicInformation;

================
File: DateTimeSection.js
================
import React from 'react';

const DateTimeSection = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
      {/* Start Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Start Time *
        </label>
        <input
          type="datetime-local"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.startTime ? 'border-red-500' : ''
          }`}
        />
        {errors.startTime && (
          <p className="mt-1 text-sm text-red-600">{errors.startTime}</p>
        )}
      </div>

      {/* End Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          End Time *
        </label>
        <input
          type="datetime-local"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.endTime ? 'border-red-500' : ''
          }`}
        />
        {errors.endTime && (
          <p className="mt-1 text-sm text-red-600">{errors.endTime}</p>
        )}
      </div>
    </div>
  );
};

export default DateTimeSection;

================
File: ExternalLinksSection.js
================
import React from 'react';
import { Plus, Trash2 } from 'lucide-react';

const ExternalLinksSection = ({ formData, setFormData }) => {
  // Ensure links object exists with default values and map video from root level
  const links = {
    registration: { title: '', url: '' },
    video: { title: 'Watch Video', url: formData.video || '' },
    report: { title: 'View Report', url: '' },
    additionalInfo: formData.links?.additionalInfo || [],
    ...formData.links
  };

  const handleLinkChange = (type, field, value) => {
    if (type === 'video' && field === 'url') {
      // Special handling for video URL - update at root level
      setFormData(prev => ({
        ...prev,
        video: value,
        links: {
          ...prev.links,
          video: {
            title: 'Watch Video',
            url: value
          }
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        links: {
          ...prev.links,
          [type]: {
            ...prev.links?.[type],
            ...(type === 'video' ? { title: 'Watch Video' } : {}),
            ...(type === 'report' ? { title: 'View Report' } : {}),
            [field]: value
          }
        }
      }));
    }
  };

  const handleAddAdditionalLink = () => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: [
          ...(prev.links?.additionalInfo || []),
          { title: '', url: '' }
        ]
      }
    }));
  };

  const handleAdditionalLinkChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: (prev.links?.additionalInfo || []).map((link, i) => 
          i === index ? { ...link, [field]: value } : link
        )
      }
    }));
  };

  const handleRemoveAdditionalLink = (index) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: (prev.links?.additionalInfo || []).filter((_, i) => i !== index)
      }
    }));
  };

  return (
    <div className="space-y-4">
      <h4 className="text-lg font-medium text-gray-900">External Links</h4>
      
      {/* Registration Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration Link Title
          </label>
          <input
            type="text"
            value={links.registration?.title || ''}
            onChange={(e) => handleLinkChange('registration', 'title', e.target.value)}
            placeholder="E.g., Register Now"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration URL
          </label>
          <input
            type="url"
            value={links.registration?.url || ''}
            onChange={(e) => handleLinkChange('registration', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Video Link */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Video URL <span className="text-gray-500">(title will be "Watch Video")</span>
        </label>
        <input
          type="url"
          value={links.video?.url || ''}
          onChange={(e) => handleLinkChange('video', 'url', e.target.value)}
          placeholder="https://"
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
        />
      </div>

      {/* Report Link */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Report URL <span className="text-gray-500">(title will be "View Report")</span>
        </label>
        <input
          type="url"
          value={links.report?.url || ''}
          onChange={(e) => handleLinkChange('report', 'url', e.target.value)}
          placeholder="https://"
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
        />
      </div>

      {/* Additional Links */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h5 className="text-sm font-medium text-gray-700">Additional Links</h5>
          <button
            type="button"
            onClick={handleAddAdditionalLink}
            className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4 mr-1" />
            Add Link
          </button>
        </div>

        {links.additionalInfo.map((link, index) => (
          <div key={index} className="grid grid-cols-2 gap-4 relative">
            <div>
              <input
                type="text"
                value={link.title || ''}
                onChange={(e) => handleAdditionalLinkChange(index, 'title', e.target.value)}
                placeholder="Link Title"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
            </div>
            <div className="flex gap-2">
              <input
                type="url"
                value={link.url || ''}
                onChange={(e) => handleAdditionalLinkChange(index, 'url', e.target.value)}
                placeholder="https://"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemoveAdditionalLink(index)}
                className="mt-1 p-2 text-red-600 hover:bg-red-50 rounded-md"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ExternalLinksSection;

================
File: index.js
================
import React, { useState, useEffect, useMemo } from 'react';
import BasicInformation from './BasicInformation';
import DateTimeSection from './DateTimeSection';
import MediaSection from './MediaSection';
import ExternalLinksSection from './ExternalLinksSection';
import { X } from 'lucide-react';

const EventFormModal = ({ isOpen, onClose, event = null, onSubmit }) => {
    const initialFormState = useMemo(() => ({
      title: '',
      subtitle: '',
      description: '',
      location: '',
      startTime: '',
      endTime: '',
      mainPicture: '',
      pictures: [],
      tags: [],
      video: '',
      links: {
        registration: { title: '', url: '' },
        location: { title: '', url: '' },
        additionalInfo: []
      }
  }), []); // 空依赖数组，因为这个对象不需要变化

  const [formData, setFormData] = useState(initialFormState);
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (event) {
      const formattedEvent = {
        ...event,
        startTime: formatDateTimeForInput(event.startTime),
        endTime: formatDateTimeForInput(event.endTime),
        tags: event.tags || [],
        pictures: event.pictures || [],
        links: event.links || initialFormState.links
      };
      setFormData(formattedEvent);
    } else {
      setFormData(initialFormState);
    }
  }, [event, isOpen, initialFormState]); // 添加 initialFormState 作为依赖

  const formatDateTimeForInput = (dateTimeStr) => {
    if (!dateTimeStr) return '';
    const date = new Date(dateTimeStr);
    return date.toISOString().slice(0, 16);
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.title) newErrors.title = 'Title is required';
    if (!formData.startTime) newErrors.startTime = 'Start time is required';
    if (!formData.endTime) newErrors.endTime = 'End time is required';
    if (!formData.location) newErrors.location = 'Location is required';
    if (new Date(formData.endTime) <= new Date(formData.startTime)) {
      newErrors.endTime = 'End time must be after start time';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const submitData = {
        ...formData,
        startTime: new Date(formData.startTime).toISOString(),
        endTime: new Date(formData.endTime).toISOString(),
        // Ensure links object exists with default structure
        links: formData.links || {
          registration: { title: '', url: '' },
          location: { title: '', url: '' },
          additionalInfo: []
        }
      };

      // Clean up empty links
      const cleanedLinks = {
        ...(submitData.links?.registration?.url && {
          registration: submitData.links.registration
        }),
        ...(submitData.links?.location?.url && {
          location: submitData.links.location
        }),
        additionalInfo: (submitData.links?.additionalInfo || []).filter(
          link => link?.title && link?.url
        )
      };

      submitData.links = cleanedLinks;
      await onSubmit(submitData);
      onClose();
    } catch (error) {
      console.error('Error submitting event:', error);
      throw error; // Re-throw to allow parent component to handle the error
    } finally {
      setLoading(false);
    }
};

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          onClick={onClose}
        />

        {/* Modal Panel */}
        <div className="relative inline-block bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-2xl sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            {/* Close Button */}
            <div className="absolute top-0 right-0 pt-4 pr-4">
              <button
                onClick={onClose}
                className="bg-white rounded-md text-gray-400 hover:text-gray-500"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
              {event ? 'Edit Event' : 'Create New Event'}
            </h3>

            <form onSubmit={handleSubmit} className="space-y-4">
              <BasicInformation
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />
              
              <DateTimeSection
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />

              <MediaSection
                formData={formData}
                setFormData={setFormData}
              />

              <ExternalLinksSection
                formData={formData}
                setFormData={setFormData}
              />

              {/* Form Actions */}
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="inline-flex justify-center px-4 py-2 text-sm font-medium text-[#2C2C2C] bg-[#FFD200] border border-transparent rounded-md hover:bg-[#FFE566] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#FFD200] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-[#2C2C2C]"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        />
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        />
                      </svg>
                      {event ? 'Updating...' : 'Creating...'}
                    </>
                  ) : (
                    event ? 'Update Event' : 'Create Event'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventFormModal;

================
File: MediaSection.js
================
import React, { useState } from 'react';
import { Plus, Trash2, X } from 'lucide-react';

const MediaSection = ({ formData, setFormData }) => {
  const [newPictureUrl, setNewPictureUrl] = useState('');
  const [newTag, setNewTag] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAddPicture = () => {
    if (newPictureUrl.trim()) {
      setFormData(prev => ({
        ...prev,
        pictures: [...prev.pictures, newPictureUrl.trim()]
      }));
      setNewPictureUrl('');
    }
  };

  const handleRemovePicture = (index) => {
    setFormData(prev => ({
      ...prev,
      pictures: prev.pictures.filter((_, i) => i !== index)
    }));
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const handleKeyPress = (e, action) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      action();
    }
  };

  return (
    <div className="space-y-4">
      {/* Main Picture URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Main Picture URL
        </label>
        <input
          type="url"
          name="mainPicture"
          value={formData.mainPicture}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>

      {/* Additional Pictures */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Additional Pictures
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="url"
            value={newPictureUrl}
            onChange={(e) => setNewPictureUrl(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddPicture)}
            placeholder="Enter picture URL"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddPicture}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 space-y-2">
          {formData.pictures.map((url, index) => (
            <div key={index} className="flex items-center space-x-2">
              <input
                type="text"
                value={url}
                readOnly
                className="flex-1 rounded-md border-gray-300 bg-gray-50 sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemovePicture(index)}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Tags */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Tags
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="text"
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddTag)}
            placeholder="Enter tag"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddTag}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 flex flex-wrap gap-2">
          {formData.tags.map((tag) => (
            <span
              key={tag}
              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
            >
              {tag}
              <button
                type="button"
                onClick={() => handleRemoveTag(tag)}
                className="ml-1 text-gray-400 hover:text-gray-600"
              >
                <X className="h-3 w-3" />
              </button>
            </span>
          ))}
        </div>
      </div>

      {/* Video URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Video URL
        </label>
        <input
          type="url"
          name="video"
          value={formData.video}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>
    </div>
  );
};

export default MediaSection;
