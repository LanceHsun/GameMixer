This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document.
Generated by Repomix on: 2025-02-08T17:50:34.155Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: components/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
config/
  paths.js
context/
  AuthContext.js
  DonationContext.js
pages/
  admin/
    components/
      AdminEventsDashboard/
        index.js
      EventForm/
        BasicInformation.js
        DateTimeSection.js
        ExternalLinksSection.js
        index.js
        MediaSection.js
    layout/
      AdminLayout/
        index.js
    pages/
      DashboardPage/
        index.js
      EventCreatePage/
        index.js
      EventEditPage/
        index.js
      LoginPage/
        index.js
    routes/
      index.js
    repopack-output.txt
  Donation/
    index.jsx
  Events/
    PastEventDetail/
      index.js
    EventDetail.js
    index.js
  Home/
    index.jsx
services/
  api.js
styles/
  globals.css
App.js
App.test.js
index.js
reportWebVitals.js
setupTests.js

================================================================
Files
================================================================

================
File: config/paths.js
================
// src/config/paths.js
export const BASE_PATH = '/GameMixer';
export const IMAGE_PATH = `${process.env.PUBLIC_URL}/images`;

export const paths = {
  getImagePath: (path) => `${IMAGE_PATH}/${path}`,
  getRoutePath: (path) => `${BASE_PATH}${path}`
};

export default paths;

================
File: context/AuthContext.js
================
// context/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from 'react';
import { authAPI } from '../services/api';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const login = async (username, password) => {
    try {
      const response = await authAPI.login(username, password);
      console.log('Login response:', response);
      
      // 保存 token
      localStorage.setItem('adminToken', response.token);
      
      // 创建用户对象
      const userObj = {
        username,
        // 从 token 中解析更多用户信息，如果需要的话
        email: response.email 
      };
      
      // 设置用户状态
      setUser(userObj);
      setError(null);
      
      console.log('Authentication successful, user:', userObj);
      
      return response;
    } catch (error) {
      console.error('Login error:', error);
      setError(error.message || 'Login failed');
      throw error;
    }
  };

  // 添加 logout 函数
  const logout = () => {
    localStorage.removeItem('adminToken');
    setUser(null);
    setError(null);
    console.log('Logged out successfully');
  };

  // 初始化认证状态
  useEffect(() => {
    const initializeAuth = async () => {
      const token = localStorage.getItem('adminToken');
      console.log('Initializing auth with token:', token);
      
      if (token) {
        try {
          // 如果需要验证 token 或获取用户信息
          const userObj = {
            // 可以从 token 中解析用户信息，或者调用 API 获取用户信息
            username: 'admin' // 临时用户对象
          };
          setUser(userObj);
        } catch (err) {
          console.error('Auth initialization error:', err);
          localStorage.removeItem('adminToken');
          setUser(null);
        }
      }
      setLoading(false);
    };

    initializeAuth();
  }, []);

  // 监听认证状态变化
  useEffect(() => {
    console.log('Auth state updated:', { user, loading, error });
  }, [user, loading, error]);

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        error,
        login,
        logout,
        isAuthenticated: !!user
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: context/DonationContext.js
================
import React, { createContext, useContext, useState } from 'react';

const DonationContext = createContext(undefined);

export function DonationProvider({ children }) {
  const [selectedAmount, setSelectedAmount] = useState(null);
  const [donationType, setDonationType] = useState('financial');
  const [customAmount, setCustomAmount] = useState('');

  const setDonationAmount = (amount) => {
    setSelectedAmount(amount);
    setCustomAmount(amount ? amount.toString() : '');
  };

  const value = {
    selectedAmount,
    donationType,
    customAmount,
    setDonationAmount,
    setDonationType,
    setCustomAmount
  };

  return (
    <DonationContext.Provider value={value}>
      {children}
    </DonationContext.Provider>
  );
}

export function useDonation() {
  const context = useContext(DonationContext);
  if (context === undefined) {
    throw new Error('useDonation must be used within a DonationProvider');
  }
  return context;
}

================
File: pages/admin/components/AdminEventsDashboard/index.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { eventService } from '../../../../services/api';
import Button from '../../../../components/common/Button';
import { Input } from '../../../../components/common/Input';

const AdminEventsDashboard = () => {
  const navigate = useNavigate();
  const [events, setEvents] = useState({ upcoming: [], past: [] });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTag, setSelectedTag] = useState('');
  const [tags, setTags] = useState([]);

  const fetchTags = useCallback(async () => {
    try {
      const response = await eventService.getEventTags();
      setTags(Array.isArray(response) ? response : []);
    } catch (err) {
      console.error('Error fetching tags:', err);
      setTags([]);
    }
  }, []);

  const fetchEvents = useCallback(async () => {
    setLoading(true);
    try {
      const data = await eventService.getAllEvents(selectedTag);
      setEvents(data);
      setError(null);
    } catch (err) {
      setError('Error loading events: Failed to fetch events');
    } finally {
      setLoading(false);
    }
  }, [selectedTag]);

  useEffect(() => {
    fetchEvents();
    fetchTags();
  }, [fetchEvents, fetchTags]);

  const handleEditEvent = (eventId) => {
    navigate(`/admin/events/edit/${eventId}`);
  };

  const handleDeleteEvent = async (id) => {
    if (window.confirm('Are you sure you want to delete this event?')) {
      try {
        const token = localStorage.getItem('adminToken'); // Changed from 'token' to 'adminToken'
        if (!token) {
          throw new Error('No authentication token found');
        }
        await eventService.deleteEvent(id, token);
        await fetchEvents(); // Added await
        setError(null); // Clear any existing errors
      } catch (err) {
        console.error('Delete error:', err);
        setError('Error deleting event: ' + (err.message || 'Unknown error'));
      }
    }
  };

  const handleCreateEvent = () => {
    navigate('/admin/events/new');
  };

  const filteredEvents = {
    upcoming: events.upcoming?.filter(event => 
      event.title.toLowerCase().includes(searchQuery.toLowerCase())
    ) || [],
    past: events.past?.filter(event => 
      event.title.toLowerCase().includes(searchQuery.toLowerCase())
    ) || []
  };

  const EventCard = ({ event }) => (
    <div className="bg-white rounded-lg shadow-md p-4 mb-4">
      <h3 className="text-xl font-semibold mb-2">{event.title}</h3>
      <p className="text-gray-600 mb-2">{event.subtitle}</p>
      <p className="text-sm text-gray-500 mb-2">
        {new Date(event.startTime).toLocaleDateString()} - 
        {new Date(event.endTime).toLocaleDateString()}
      </p>
      <div className="flex gap-2">
        <Button onClick={() => handleEditEvent(event.id)}>
          Edit
        </Button>
        <Button onClick={() => handleDeleteEvent(event.id)}>
          Delete
        </Button>
      </div>
    </div>
  );

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Event Management</h1>
        <Button onClick={handleCreateEvent}>
          + Create Event
        </Button>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <div className="mb-6 flex gap-4">
        <Input
          type="text"
          placeholder="Search events..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="max-w-sm"
        />
        <select
          value={selectedTag}
          onChange={(e) => setSelectedTag(e.target.value)}
          className="border rounded p-2"
        >
          <option value="">All Tags</option>
          {Array.isArray(tags) && tags.map(tag => (
            <option key={tag} value={tag}>{tag}</option>
          ))}
        </select>
      </div>

      {loading ? (
        <div className="text-center py-8">Loading...</div>
      ) : (
        <div>
          <section className="mb-8">
            <h2 className="text-xl font-semibold mb-4">
              Upcoming Events ({filteredEvents.upcoming.length})
            </h2>
            <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
              {filteredEvents.upcoming.map(event => (
                <EventCard key={event.id} event={event} />
              ))}
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold mb-4">
              Past Events ({filteredEvents.past.length})
            </h2>
            <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
              {filteredEvents.past.map(event => (
                <EventCard key={event.id} event={event} />
              ))}
            </div>
          </section>
        </div>
      )}
    </div>
  );
};

export default AdminEventsDashboard;

================
File: pages/admin/components/EventForm/BasicInformation.js
================
import React from 'react';

const BasicInformation = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="space-y-4">
      {/* Title */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Title *
        </label>
        <input
          type="text"
          name="title"
          value={formData.title}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.title ? 'border-red-500' : ''
          }`}
        />
        {errors.title && (
          <p className="mt-1 text-sm text-red-600">{errors.title}</p>
        )}
      </div>

      {/* Subtitle */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Subtitle
        </label>
        <input
          type="text"
          name="subtitle"
          value={formData.subtitle}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
        />
      </div>

      {/* Location */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Location *
        </label>
        <input
          type="text"
          name="location"
          value={formData.location}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.location ? 'border-red-500' : ''
          }`}
        />
        {errors.location && (
          <p className="mt-1 text-sm text-red-600">{errors.location}</p>
        )}
      </div>

      {/* Description */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          name="description"
          rows="4"
          value={formData.description}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="Enter event description..."
        />
      </div>
    </div>
  );
};

export default BasicInformation;

================
File: pages/admin/components/EventForm/DateTimeSection.js
================
import React from 'react';

const DateTimeSection = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
      {/* Start Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Start Time *
        </label>
        <input
          type="datetime-local"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.startTime ? 'border-red-500' : ''
          }`}
        />
        {errors.startTime && (
          <p className="mt-1 text-sm text-red-600">{errors.startTime}</p>
        )}
      </div>

      {/* End Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          End Time *
        </label>
        <input
          type="datetime-local"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.endTime ? 'border-red-500' : ''
          }`}
        />
        {errors.endTime && (
          <p className="mt-1 text-sm text-red-600">{errors.endTime}</p>
        )}
      </div>
    </div>
  );
};

export default DateTimeSection;

================
File: pages/admin/components/EventForm/ExternalLinksSection.js
================
import React from 'react';
import { Plus, Trash2 } from 'lucide-react';

const ExternalLinksSection = ({ formData, setFormData }) => {
  // Ensure links object exists with default values
  const links = formData.links || {
    registration: { title: '', url: '' },
    location: { title: '', url: '' },
    additionalInfo: []
  };

  const handleLinkChange = (type, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        [type]: {
          ...prev.links?.[type],
          [field]: value
        }
      }
    }));
  };

  const handleAddAdditionalLink = () => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: [
          ...(prev.links?.additionalInfo || []),
          { title: '', url: '' }
        ]
      }
    }));
  };

  const handleAdditionalLinkChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: (prev.links?.additionalInfo || []).map((link, i) => 
          i === index ? { ...link, [field]: value } : link
        )
      }
    }));
  };

  const handleRemoveAdditionalLink = (index) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: (prev.links?.additionalInfo || []).filter((_, i) => i !== index)
      }
    }));
  };

  return (
    <div className="space-y-4">
      <h4 className="text-lg font-medium text-gray-900">External Links</h4>
      
      {/* Registration Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration Link Title
          </label>
          <input
            type="text"
            value={links.registration?.title || ''}
            onChange={(e) => handleLinkChange('registration', 'title', e.target.value)}
            placeholder="E.g., Register Now"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration URL
          </label>
          <input
            type="url"
            value={links.registration?.url || ''}
            onChange={(e) => handleLinkChange('registration', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Location Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Location Link Title
          </label>
          <input
            type="text"
            value={links.location?.title || ''}
            onChange={(e) => handleLinkChange('location', 'title', e.target.value)}
            placeholder="E.g., View on Map"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Location URL
          </label>
          <input
            type="url"
            value={links.location?.url || ''}
            onChange={(e) => handleLinkChange('location', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Additional Links */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h5 className="text-sm font-medium text-gray-700">Additional Links</h5>
          <button
            type="button"
            onClick={handleAddAdditionalLink}
            className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4 mr-1" />
            Add Link
          </button>
        </div>

        {(links.additionalInfo || []).map((link, index) => (
          <div key={index} className="grid grid-cols-2 gap-4 relative">
            <div>
              <input
                type="text"
                value={link.title || ''}
                onChange={(e) => handleAdditionalLinkChange(index, 'title', e.target.value)}
                placeholder="Link Title"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
            </div>
            <div className="flex gap-2">
              <input
                type="url"
                value={link.url || ''}
                onChange={(e) => handleAdditionalLinkChange(index, 'url', e.target.value)}
                placeholder="https://"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemoveAdditionalLink(index)}
                className="mt-1 p-2 text-red-600 hover:bg-red-50 rounded-md"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ExternalLinksSection;

================
File: pages/admin/components/EventForm/index.js
================
import React, { useState, useEffect, useMemo } from 'react';
import BasicInformation from './BasicInformation';
import DateTimeSection from './DateTimeSection';
import MediaSection from './MediaSection';
import ExternalLinksSection from './ExternalLinksSection';
import { X } from 'lucide-react';

const EventFormModal = ({ isOpen, onClose, event = null, onSubmit }) => {
    const initialFormState = useMemo(() => ({
      title: '',
      subtitle: '',
      description: '',
      location: '',
      startTime: '',
      endTime: '',
      mainPicture: '',
      pictures: [],
      tags: [],
      video: '',
      links: {
        registration: { title: '', url: '' },
        location: { title: '', url: '' },
        additionalInfo: []
      }
  }), []); // 空依赖数组，因为这个对象不需要变化

  const [formData, setFormData] = useState(initialFormState);
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (event) {
      const formattedEvent = {
        ...event,
        startTime: formatDateTimeForInput(event.startTime),
        endTime: formatDateTimeForInput(event.endTime),
        tags: event.tags || [],
        pictures: event.pictures || [],
        links: event.links || initialFormState.links
      };
      setFormData(formattedEvent);
    } else {
      setFormData(initialFormState);
    }
  }, [event, isOpen, initialFormState]); // 添加 initialFormState 作为依赖

  const formatDateTimeForInput = (dateTimeStr) => {
    if (!dateTimeStr) return '';
    const date = new Date(dateTimeStr);
    return date.toISOString().slice(0, 16);
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.title) newErrors.title = 'Title is required';
    if (!formData.startTime) newErrors.startTime = 'Start time is required';
    if (!formData.endTime) newErrors.endTime = 'End time is required';
    if (!formData.location) newErrors.location = 'Location is required';
    if (new Date(formData.endTime) <= new Date(formData.startTime)) {
      newErrors.endTime = 'End time must be after start time';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const submitData = {
        ...formData,
        startTime: new Date(formData.startTime).toISOString(),
        endTime: new Date(formData.endTime).toISOString(),
        // Ensure links object exists with default structure
        links: formData.links || {
          registration: { title: '', url: '' },
          location: { title: '', url: '' },
          additionalInfo: []
        }
      };

      // Clean up empty links
      const cleanedLinks = {
        ...(submitData.links?.registration?.url && {
          registration: submitData.links.registration
        }),
        ...(submitData.links?.location?.url && {
          location: submitData.links.location
        }),
        additionalInfo: (submitData.links?.additionalInfo || []).filter(
          link => link?.title && link?.url
        )
      };

      submitData.links = cleanedLinks;
      await onSubmit(submitData);
      onClose();
    } catch (error) {
      console.error('Error submitting event:', error);
      throw error; // Re-throw to allow parent component to handle the error
    } finally {
      setLoading(false);
    }
};

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          onClick={onClose}
        />

        {/* Modal Panel */}
        <div className="relative inline-block bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-2xl sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            {/* Close Button */}
            <div className="absolute top-0 right-0 pt-4 pr-4">
              <button
                onClick={onClose}
                className="bg-white rounded-md text-gray-400 hover:text-gray-500"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
              {event ? 'Edit Event' : 'Create New Event'}
            </h3>

            <form onSubmit={handleSubmit} className="space-y-4">
              <BasicInformation
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />
              
              <DateTimeSection
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />

              <MediaSection
                formData={formData}
                setFormData={setFormData}
              />

              <ExternalLinksSection
                formData={formData}
                setFormData={setFormData}
              />

              {/* Form Actions */}
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="inline-flex justify-center px-4 py-2 text-sm font-medium text-[#2C2C2C] bg-[#FFD200] border border-transparent rounded-md hover:bg-[#FFE566] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#FFD200] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-[#2C2C2C]"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        />
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        />
                      </svg>
                      {event ? 'Updating...' : 'Creating...'}
                    </>
                  ) : (
                    event ? 'Update Event' : 'Create Event'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventFormModal;

================
File: pages/admin/components/EventForm/MediaSection.js
================
import React, { useState } from 'react';
import { Plus, Trash2, X } from 'lucide-react';

const MediaSection = ({ formData, setFormData }) => {
  const [newPictureUrl, setNewPictureUrl] = useState('');
  const [newTag, setNewTag] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAddPicture = () => {
    if (newPictureUrl.trim()) {
      setFormData(prev => ({
        ...prev,
        pictures: [...prev.pictures, newPictureUrl.trim()]
      }));
      setNewPictureUrl('');
    }
  };

  const handleRemovePicture = (index) => {
    setFormData(prev => ({
      ...prev,
      pictures: prev.pictures.filter((_, i) => i !== index)
    }));
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const handleKeyPress = (e, action) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      action();
    }
  };

  return (
    <div className="space-y-4">
      {/* Main Picture URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Main Picture URL
        </label>
        <input
          type="url"
          name="mainPicture"
          value={formData.mainPicture}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>

      {/* Additional Pictures */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Additional Pictures
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="url"
            value={newPictureUrl}
            onChange={(e) => setNewPictureUrl(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddPicture)}
            placeholder="Enter picture URL"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddPicture}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 space-y-2">
          {formData.pictures.map((url, index) => (
            <div key={index} className="flex items-center space-x-2">
              <input
                type="text"
                value={url}
                readOnly
                className="flex-1 rounded-md border-gray-300 bg-gray-50 sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemovePicture(index)}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Tags */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Tags
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="text"
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddTag)}
            placeholder="Enter tag"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddTag}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 flex flex-wrap gap-2">
          {formData.tags.map((tag) => (
            <span
              key={tag}
              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
            >
              {tag}
              <button
                type="button"
                onClick={() => handleRemoveTag(tag)}
                className="ml-1 text-gray-400 hover:text-gray-600"
              >
                <X className="h-3 w-3" />
              </button>
            </span>
          ))}
        </div>
      </div>

      {/* Video URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Video URL
        </label>
        <input
          type="url"
          name="video"
          value={formData.video}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>
    </div>
  );
};

export default MediaSection;

================
File: pages/admin/layout/AdminLayout/index.js
================
// src/pages/admin/layout/AdminLayout/index.js
import React from 'react';
import { useLocation } from 'react-router-dom';

const AdminLayout = ({ children }) => {
  const location = useLocation();

  // 登录页面不需要使用Admin布局
  if (location.pathname === '/admin/login') {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {children}
    </div>
  );
};

export default AdminLayout;

================
File: pages/admin/pages/DashboardPage/index.js
================
import React from 'react';
import { useAuth } from '../../../../context/AuthContext';
import AdminEventsDashboard from '../../components/AdminEventsDashboard';


const DashboardPage = () => {
  const { user, logout } = useAuth();

  const handleLogout = () => {
    logout();
  };

  return (
    <div className="min-h-screen bg-[#FAF6F0]">
      <div className="p-4 bg-white shadow-sm mb-6">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div>
            <h1 className="text-xl font-bold text-[#2C2C2C]">Admin Dashboard</h1>
            <p className="text-sm text-gray-600">Welcome, {user?.username}</p>
          </div>
          <button
            onClick={handleLogout}
            className="px-4 py-2 bg-[#FFD200] text-[#2C2C2C] rounded-lg hover:bg-[#FFE566] transition-colors"
          >
            Logout
          </button>
        </div>
      </div>

      <AdminEventsDashboard />
    </div>
  );
};

export default DashboardPage;

================
File: pages/admin/pages/EventCreatePage/index.js
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../../../context/AuthContext';
import EventFormModal from '../../components/EventForm';
import { eventService } from '../../../../services/api';

const EventCreatePage = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  React.useEffect(() => {
    if (!isAuthenticated) {
      navigate('/admin/login');
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (eventData) => {
    try {
      const token = localStorage.getItem('adminToken');
      
      if (!token) {
        navigate('/admin/login');
        throw new Error('You are not logged in. Please log in and try again.');
      }

      await eventService.createEvent(eventData, token);
      navigate('/admin/dashboard');
    } catch (err) {
      console.error('Error creating event:', err);
      throw err;
    }
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <EventFormModal
      isOpen={true}
      onClose={() => navigate('/admin/dashboard')}
      onSubmit={handleSubmit}
    />
  );
};

export default EventCreatePage;

================
File: pages/admin/pages/EventEditPage/index.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import EventFormModal from '../../components/EventForm';
import { eventService } from '../../../../services/api';

const EventEditPage = () => {
  const { eventId } = useParams();
  const navigate = useNavigate();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        console.log('Fetching event with ID:', eventId);
        const eventData = await eventService.getEventById(eventId);
        console.log('Fetched event data:', eventData);
        setEvent(eventData);
        setError(null);
      } catch (err) {
        console.error('Error fetching event:', err);
        setError(err.message || 'Failed to fetch event details');
      } finally {
        setLoading(false);
      }
    };

    if (eventId) {
      fetchEvent();
    } else {
      setError('No event ID provided');
      setLoading(false);
    }
  }, [eventId]);

  const handleSubmit = async (eventData) => {
    setLoading(true);
    setError(null);
    
    try {
      const token = localStorage.getItem('adminToken');
      if (!token) {
        throw new Error('You are not logged in. Please log in and try again.');
      }

      // Log the data being sent
      console.log('Submitting event update:', {
        id: eventId,
        data: eventData
      });

      const updatedEvent = await eventService.updateEvent(eventId, eventData, token);
      console.log('Event updated successfully:', updatedEvent);
      
      setShowSuccess(true);
      
      // Delay navigation to show success message
      setTimeout(() => {
        navigate('/admin/dashboard');
      }, 1500);
    } catch (err) {
      console.error('Failed to update event:', err);
      setError(err.message || 'Failed to update event. Please try again.');
      setShowSuccess(false);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="relative">
      {error && (
        <div className="mb-4 p-4 bg-red-50 border-l-4 border-red-500 text-red-700">
          <p className="font-medium">Error:</p>
          <p>{error}</p>
        </div>
      )}
      
      {showSuccess && (
        <div className="mb-4 p-4 bg-green-50 border-l-4 border-green-500 text-green-700">
          <p>Event updated successfully! Redirecting to dashboard...</p>
        </div>
      )}

      <EventFormModal
        isOpen={true}
        onClose={() => navigate('/admin/dashboard')}
        event={event}
        onSubmit={handleSubmit}
      />
    </div>
  );
};

export default EventEditPage;

================
File: pages/admin/pages/LoginPage/index.js
================
// pages/admin/pages/LoginPage/index.js
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../../context/AuthContext';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  const { login, error: authError, isAuthenticated } = useAuth();

  // 监听认证状态变化
  useEffect(() => {
    console.log('Auth state changed:', { isAuthenticated });
    if (isAuthenticated) {
      const from = location.state?.from?.pathname || '/admin/dashboard';
      console.log('Redirecting to:', from);
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, navigate, location]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      console.log('Submitting login with:', credentials);
      await login(credentials.username, credentials.password);
      console.log('Login successful');
    } catch (error) {
      console.error('Login submission error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#FAF6F0] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-sm">
        {/* Logo & Header */}
        <div>
          <img
            src={process.env.PUBLIC_URL + "/images/Game-mixer-logo.avif"}
            alt="Game Mixer Logo"
            className="mx-auto h-16 w-16 p-2 bg-[#FFD200] rounded-lg"
          />
          <h2 className="mt-6 text-center text-3xl font-bold text-[#2C2C2C]">
            Admin Login
          </h2>
        </div>

        {/* Error Message */}
        {authError && (
          <div className="bg-red-50 border-l-4 border-red-400 p-4">
            <div className="flex">
              <div className="ml-3">
                <p className="text-sm text-red-700">
                  {authError}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Login Form */}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* Username Field */}
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-[#2C2C2C]">
                Username
              </label>
              <input
                id="username"
                name="username"
                type="text"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md 
                         shadow-sm focus:outline-none focus:ring-[#FFD200] focus:border-[#FFD200]
                         text-[#2C2C2C]"
                value={credentials.username}
                onChange={handleChange}
                disabled={loading}
              />
            </div>

            {/* Password Field */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-[#2C2C2C]">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md 
                         shadow-sm focus:outline-none focus:ring-[#FFD200] focus:border-[#FFD200]
                         text-[#2C2C2C]"
                value={credentials.password}
                onChange={handleChange}
                disabled={loading}
              />
            </div>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={loading}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md
                     shadow-sm text-[#2C2C2C] font-medium bg-[#FFD200] 
                     hover:bg-[#FFE566] focus:outline-none focus:ring-2 
                     focus:ring-offset-2 focus:ring-[#FFD200] transition-colors
                     ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-[#2C2C2C]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Signing in...
              </span>
            ) : (
              'Sign in'
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;

================
File: pages/admin/routes/index.js
================
// src/pages/admin/routes/index.js
import React from 'react';
import { Route } from 'react-router-dom';
import AdminLayout from '../layout/AdminLayout';
import DashboardPage from '../pages/DashboardPage';
import EventEditPage from '../pages/EventEditPage';
import EventCreatePage from '../pages/EventCreatePage';
import LoginPage from '../pages/LoginPage';

export const adminRoutes = [
  <Route key="admin" path="/admin" element={<AdminLayout />}>
    <Route path="login" element={<LoginPage />} />
    <Route path="dashboard" element={<DashboardPage />} />
    <Route path="events/new" element={<EventCreatePage />} />
    <Route path="events/edit/:eventId" element={<EventEditPage />} />
  </Route>
];

================
File: pages/admin/repopack-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-02-07T18:33:34.281Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/
  AdminEventsDashboard/
    index.js
  EventForm/
    BasicInformation.js
    DateTimeSection.js
    ExternalLinksSection.js
    index.js
    MediaSection.js
layout/
  AdminLayout/
    index.js
pages/
  DashboardPage/
    index.js
  EventCreatePage/
    index.js
  EventEditPage/
    index.js
  LoginPage/
    index.js
routes/
  index.js

================================================================
Repository Files
================================================================

================
File: components/AdminEventsDashboard/index.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { eventService } from '../../../../services/api';
import Button from '../../../../components/common/Button';
import { Input } from '../../../../components/common/Input';

const AdminEventsDashboard = () => {
  const navigate = useNavigate();
  const [events, setEvents] = useState({ upcoming: [], past: [] });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedTag, setSelectedTag] = useState('');
  const [tags, setTags] = useState([]);

  const fetchTags = useCallback(async () => {
    try {
      const response = await eventService.getEventTags();
      setTags(Array.isArray(response) ? response : []);
    } catch (err) {
      console.error('Error fetching tags:', err);
      setTags([]);
    }
  }, []);

  const fetchEvents = useCallback(async () => {
    setLoading(true);
    try {
      const data = await eventService.getAllEvents(selectedTag);
      setEvents(data);
      setError(null);
    } catch (err) {
      setError('Error loading events: Failed to fetch events');
    } finally {
      setLoading(false);
    }
  }, [selectedTag]);

  useEffect(() => {
    fetchEvents();
    fetchTags();
  }, [fetchEvents, fetchTags]);

  const handleEditEvent = (eventId) => {
    navigate(`/admin/events/edit/${eventId}`);
  };

  const handleDeleteEvent = async (id) => {
    if (window.confirm('Are you sure you want to delete this event?')) {
      try {
        const token = localStorage.getItem('adminToken'); // Changed from 'token' to 'adminToken'
        if (!token) {
          throw new Error('No authentication token found');
        }
        await eventService.deleteEvent(id, token);
        await fetchEvents(); // Added await
        setError(null); // Clear any existing errors
      } catch (err) {
        console.error('Delete error:', err);
        setError('Error deleting event: ' + (err.message || 'Unknown error'));
      }
    }
  };

  const handleCreateEvent = () => {
    navigate('/admin/events/create');
  };

  const filteredEvents = {
    upcoming: events.upcoming?.filter(event => 
      event.title.toLowerCase().includes(searchQuery.toLowerCase())
    ) || [],
    past: events.past?.filter(event => 
      event.title.toLowerCase().includes(searchQuery.toLowerCase())
    ) || []
  };

  const EventCard = ({ event }) => (
    <div className="bg-white rounded-lg shadow-md p-4 mb-4">
      <h3 className="text-xl font-semibold mb-2">{event.title}</h3>
      <p className="text-gray-600 mb-2">{event.subtitle}</p>
      <p className="text-sm text-gray-500 mb-2">
        {new Date(event.startTime).toLocaleDateString()} - 
        {new Date(event.endTime).toLocaleDateString()}
      </p>
      <div className="flex gap-2">
        <Button onClick={() => handleEditEvent(event.id)}>
          Edit
        </Button>
        <Button onClick={() => handleDeleteEvent(event.id)}>
          Delete
        </Button>
      </div>
    </div>
  );

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Event Management</h1>
        <Button onClick={handleCreateEvent}>
          + Create Event
        </Button>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <div className="mb-6 flex gap-4">
        <Input
          type="text"
          placeholder="Search events..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="max-w-sm"
        />
        <select
          value={selectedTag}
          onChange={(e) => setSelectedTag(e.target.value)}
          className="border rounded p-2"
        >
          <option value="">All Tags</option>
          {Array.isArray(tags) && tags.map(tag => (
            <option key={tag} value={tag}>{tag}</option>
          ))}
        </select>
      </div>

      {loading ? (
        <div className="text-center py-8">Loading...</div>
      ) : (
        <div>
          <section className="mb-8">
            <h2 className="text-xl font-semibold mb-4">
              Upcoming Events ({filteredEvents.upcoming.length})
            </h2>
            <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
              {filteredEvents.upcoming.map(event => (
                <EventCard key={event.id} event={event} />
              ))}
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold mb-4">
              Past Events ({filteredEvents.past.length})
            </h2>
            <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
              {filteredEvents.past.map(event => (
                <EventCard key={event.id} event={event} />
              ))}
            </div>
          </section>
        </div>
      )}
    </div>
  );
};

export default AdminEventsDashboard;

================
File: components/EventForm/BasicInformation.js
================
import React from 'react';

const BasicInformation = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="space-y-4">
      {/* Title */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Title *
        </label>
        <input
          type="text"
          name="title"
          value={formData.title}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.title ? 'border-red-500' : ''
          }`}
        />
        {errors.title && (
          <p className="mt-1 text-sm text-red-600">{errors.title}</p>
        )}
      </div>

      {/* Subtitle */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Subtitle
        </label>
        <input
          type="text"
          name="subtitle"
          value={formData.subtitle}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
        />
      </div>

      {/* Location */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Location *
        </label>
        <input
          type="text"
          name="location"
          value={formData.location}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.location ? 'border-red-500' : ''
          }`}
        />
        {errors.location && (
          <p className="mt-1 text-sm text-red-600">{errors.location}</p>
        )}
      </div>

      {/* Description */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Description
        </label>
        <textarea
          name="description"
          rows="4"
          value={formData.description}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="Enter event description..."
        />
      </div>
    </div>
  );
};

export default BasicInformation;

================
File: components/EventForm/DateTimeSection.js
================
import React from 'react';

const DateTimeSection = ({ formData, setFormData, errors }) => {
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
      {/* Start Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Start Time *
        </label>
        <input
          type="datetime-local"
          name="startTime"
          value={formData.startTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.startTime ? 'border-red-500' : ''
          }`}
        />
        {errors.startTime && (
          <p className="mt-1 text-sm text-red-600">{errors.startTime}</p>
        )}
      </div>

      {/* End Time */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          End Time *
        </label>
        <input
          type="datetime-local"
          name="endTime"
          value={formData.endTime}
          onChange={handleChange}
          className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm ${
            errors.endTime ? 'border-red-500' : ''
          }`}
        />
        {errors.endTime && (
          <p className="mt-1 text-sm text-red-600">{errors.endTime}</p>
        )}
      </div>
    </div>
  );
};

export default DateTimeSection;

================
File: components/EventForm/ExternalLinksSection.js
================
import React from 'react';
import { Plus, Trash2 } from 'lucide-react';

const ExternalLinksSection = ({ formData, setFormData }) => {
  // Ensure links object exists with default values
  const links = formData.links || {
    registration: { title: '', url: '' },
    location: { title: '', url: '' },
    additionalInfo: []
  };

  const handleLinkChange = (type, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        [type]: {
          ...prev.links?.[type],
          [field]: value
        }
      }
    }));
  };

  const handleAddAdditionalLink = () => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: [
          ...(prev.links?.additionalInfo || []),
          { title: '', url: '' }
        ]
      }
    }));
  };

  const handleAdditionalLinkChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: (prev.links?.additionalInfo || []).map((link, i) => 
          i === index ? { ...link, [field]: value } : link
        )
      }
    }));
  };

  const handleRemoveAdditionalLink = (index) => {
    setFormData(prev => ({
      ...prev,
      links: {
        ...prev.links,
        additionalInfo: (prev.links?.additionalInfo || []).filter((_, i) => i !== index)
      }
    }));
  };

  return (
    <div className="space-y-4">
      <h4 className="text-lg font-medium text-gray-900">External Links</h4>
      
      {/* Registration Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration Link Title
          </label>
          <input
            type="text"
            value={links.registration?.title || ''}
            onChange={(e) => handleLinkChange('registration', 'title', e.target.value)}
            placeholder="E.g., Register Now"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Registration URL
          </label>
          <input
            type="url"
            value={links.registration?.url || ''}
            onChange={(e) => handleLinkChange('registration', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Location Link */}
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Location Link Title
          </label>
          <input
            type="text"
            value={links.location?.title || ''}
            onChange={(e) => handleLinkChange('location', 'title', e.target.value)}
            placeholder="E.g., View on Map"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">
            Location URL
          </label>
          <input
            type="url"
            value={links.location?.url || ''}
            onChange={(e) => handleLinkChange('location', 'url', e.target.value)}
            placeholder="https://"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
        </div>
      </div>

      {/* Additional Links */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h5 className="text-sm font-medium text-gray-700">Additional Links</h5>
          <button
            type="button"
            onClick={handleAddAdditionalLink}
            className="inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4 mr-1" />
            Add Link
          </button>
        </div>

        {(links.additionalInfo || []).map((link, index) => (
          <div key={index} className="grid grid-cols-2 gap-4 relative">
            <div>
              <input
                type="text"
                value={link.title || ''}
                onChange={(e) => handleAdditionalLinkChange(index, 'title', e.target.value)}
                placeholder="Link Title"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
            </div>
            <div className="flex gap-2">
              <input
                type="url"
                value={link.url || ''}
                onChange={(e) => handleAdditionalLinkChange(index, 'url', e.target.value)}
                placeholder="https://"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemoveAdditionalLink(index)}
                className="mt-1 p-2 text-red-600 hover:bg-red-50 rounded-md"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ExternalLinksSection;

================
File: components/EventForm/index.js
================
import React, { useState, useEffect, useMemo } from 'react';
import BasicInformation from './BasicInformation';
import DateTimeSection from './DateTimeSection';
import MediaSection from './MediaSection';
import ExternalLinksSection from './ExternalLinksSection';
import { X } from 'lucide-react';

const EventFormModal = ({ isOpen, onClose, event = null, onSubmit }) => {
    const initialFormState = useMemo(() => ({
      title: '',
      subtitle: '',
      description: '',
      location: '',
      startTime: '',
      endTime: '',
      mainPicture: '',
      pictures: [],
      tags: [],
      video: '',
      links: {
        registration: { title: '', url: '' },
        location: { title: '', url: '' },
        additionalInfo: []
      }
  }), []); // 空依赖数组，因为这个对象不需要变化

  const [formData, setFormData] = useState(initialFormState);
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (event) {
      const formattedEvent = {
        ...event,
        startTime: formatDateTimeForInput(event.startTime),
        endTime: formatDateTimeForInput(event.endTime),
        tags: event.tags || [],
        pictures: event.pictures || [],
        links: event.links || initialFormState.links
      };
      setFormData(formattedEvent);
    } else {
      setFormData(initialFormState);
    }
  }, [event, isOpen, initialFormState]); // 添加 initialFormState 作为依赖

  const formatDateTimeForInput = (dateTimeStr) => {
    if (!dateTimeStr) return '';
    const date = new Date(dateTimeStr);
    return date.toISOString().slice(0, 16);
  };

  const validateForm = () => {
    const newErrors = {};
    if (!formData.title) newErrors.title = 'Title is required';
    if (!formData.startTime) newErrors.startTime = 'Start time is required';
    if (!formData.endTime) newErrors.endTime = 'End time is required';
    if (!formData.location) newErrors.location = 'Location is required';
    if (new Date(formData.endTime) <= new Date(formData.startTime)) {
      newErrors.endTime = 'End time must be after start time';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const submitData = {
        ...formData,
        startTime: new Date(formData.startTime).toISOString(),
        endTime: new Date(formData.endTime).toISOString(),
        // Ensure links object exists with default structure
        links: formData.links || {
          registration: { title: '', url: '' },
          location: { title: '', url: '' },
          additionalInfo: []
        }
      };

      // Clean up empty links
      const cleanedLinks = {
        ...(submitData.links?.registration?.url && {
          registration: submitData.links.registration
        }),
        ...(submitData.links?.location?.url && {
          location: submitData.links.location
        }),
        additionalInfo: (submitData.links?.additionalInfo || []).filter(
          link => link?.title && link?.url
        )
      };

      submitData.links = cleanedLinks;
      await onSubmit(submitData);
      onClose();
    } catch (error) {
      console.error('Error submitting event:', error);
      throw error; // Re-throw to allow parent component to handle the error
    } finally {
      setLoading(false);
    }
};

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:p-0">
        {/* Backdrop */}
        <div
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          onClick={onClose}
        />

        {/* Modal Panel */}
        <div className="relative inline-block bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-2xl sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            {/* Close Button */}
            <div className="absolute top-0 right-0 pt-4 pr-4">
              <button
                onClick={onClose}
                className="bg-white rounded-md text-gray-400 hover:text-gray-500"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
              {event ? 'Edit Event' : 'Create New Event'}
            </h3>

            <form onSubmit={handleSubmit} className="space-y-4">
              <BasicInformation
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />
              
              <DateTimeSection
                formData={formData}
                setFormData={setFormData}
                errors={errors}
              />

              <MediaSection
                formData={formData}
                setFormData={setFormData}
              />

              <ExternalLinksSection
                formData={formData}
                setFormData={setFormData}
              />

              {/* Form Actions */}
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={onClose}
                  className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={loading}
                  className="inline-flex justify-center px-4 py-2 text-sm font-medium text-[#2C2C2C] bg-[#FFD200] border border-transparent rounded-md hover:bg-[#FFE566] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#FFD200] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-[#2C2C2C]"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        />
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        />
                      </svg>
                      {event ? 'Updating...' : 'Creating...'}
                    </>
                  ) : (
                    event ? 'Update Event' : 'Create Event'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventFormModal;

================
File: components/EventForm/MediaSection.js
================
import React, { useState } from 'react';
import { Plus, Trash2, X } from 'lucide-react';

const MediaSection = ({ formData, setFormData }) => {
  const [newPictureUrl, setNewPictureUrl] = useState('');
  const [newTag, setNewTag] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAddPicture = () => {
    if (newPictureUrl.trim()) {
      setFormData(prev => ({
        ...prev,
        pictures: [...prev.pictures, newPictureUrl.trim()]
      }));
      setNewPictureUrl('');
    }
  };

  const handleRemovePicture = (index) => {
    setFormData(prev => ({
      ...prev,
      pictures: prev.pictures.filter((_, i) => i !== index)
    }));
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(t => t !== tag)
    }));
  };

  const handleKeyPress = (e, action) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      action();
    }
  };

  return (
    <div className="space-y-4">
      {/* Main Picture URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Main Picture URL
        </label>
        <input
          type="url"
          name="mainPicture"
          value={formData.mainPicture}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>

      {/* Additional Pictures */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Additional Pictures
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="url"
            value={newPictureUrl}
            onChange={(e) => setNewPictureUrl(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddPicture)}
            placeholder="Enter picture URL"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddPicture}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 space-y-2">
          {formData.pictures.map((url, index) => (
            <div key={index} className="flex items-center space-x-2">
              <input
                type="text"
                value={url}
                readOnly
                className="flex-1 rounded-md border-gray-300 bg-gray-50 sm:text-sm"
              />
              <button
                type="button"
                onClick={() => handleRemovePicture(index)}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Tags */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Tags
        </label>
        <div className="mt-1 flex space-x-2">
          <input
            type="text"
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyPress={(e) => handleKeyPress(e, handleAddTag)}
            placeholder="Enter tag"
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          />
          <button
            type="button"
            onClick={handleAddTag}
            className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-[#2C2C2C] bg-[#FFD200] hover:bg-[#FFE566]"
          >
            <Plus className="h-4 w-4" />
          </button>
        </div>
        <div className="mt-2 flex flex-wrap gap-2">
          {formData.tags.map((tag) => (
            <span
              key={tag}
              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
            >
              {tag}
              <button
                type="button"
                onClick={() => handleRemoveTag(tag)}
                className="ml-1 text-gray-400 hover:text-gray-600"
              >
                <X className="h-3 w-3" />
              </button>
            </span>
          ))}
        </div>
      </div>

      {/* Video URL */}
      <div>
        <label className="block text-sm font-medium text-gray-700">
          Video URL
        </label>
        <input
          type="url"
          name="video"
          value={formData.video}
          onChange={handleChange}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-[#FFD200] focus:ring-[#FFD200] sm:text-sm"
          placeholder="https://..."
        />
      </div>
    </div>
  );
};

export default MediaSection;

================
File: layout/AdminLayout/index.js
================
// src/pages/admin/layout/AdminLayout/index.js
import React from 'react';
import { useLocation } from 'react-router-dom';

const AdminLayout = ({ children }) => {
  const location = useLocation();

  // 登录页面不需要使用Admin布局
  if (location.pathname === '/admin/login') {
    return null;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {children}
    </div>
  );
};

export default AdminLayout;

================
File: pages/DashboardPage/index.js
================
import React from 'react';
import { useAuth } from '../../../../context/AuthContext';
import AdminEventsDashboard from '../../components/AdminEventsDashboard';


const DashboardPage = () => {
  const { user, logout } = useAuth();

  const handleLogout = () => {
    logout();
  };

  return (
    <div className="min-h-screen bg-[#FAF6F0]">
      <div className="p-4 bg-white shadow-sm mb-6">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div>
            <h1 className="text-xl font-bold text-[#2C2C2C]">Admin Dashboard</h1>
            <p className="text-sm text-gray-600">Welcome, {user?.username}</p>
          </div>
          <button
            onClick={handleLogout}
            className="px-4 py-2 bg-[#FFD200] text-[#2C2C2C] rounded-lg hover:bg-[#FFE566] transition-colors"
          >
            Logout
          </button>
        </div>
      </div>

      <AdminEventsDashboard />
    </div>
  );
};

export default DashboardPage;

================
File: pages/EventCreatePage/index.js
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import EventFormModal from '../../components/EventForm';
import { eventService } from '../../../../services/api';

const EventCreatePage = () => {
  const navigate = useNavigate();

  const handleSubmit = async (eventData) => {
    try {
      const token = localStorage.getItem('token');
      await eventService.createEvent(eventData, token);
      navigate('/admin/dashboard');
    } catch (err) {
      console.error('Error creating event:', err);
      throw err;
    }
  };

  return (
    <EventFormModal
      isOpen={true}
      onClose={() => navigate('/admin/dashboard')}
      onSubmit={handleSubmit}
    />
  );
};

export default EventCreatePage;

================
File: pages/EventEditPage/index.js
================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import EventFormModal from '../../components/EventForm';
import { eventService } from '../../../../services/api';

const EventEditPage = () => {
  const { eventId } = useParams();
  const navigate = useNavigate();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSuccess, setShowSuccess] = useState(false);

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        console.log('Fetching event with ID:', eventId);
        const eventData = await eventService.getEventById(eventId);
        console.log('Fetched event data:', eventData);
        setEvent(eventData);
        setError(null);
      } catch (err) {
        console.error('Error fetching event:', err);
        setError(err.message || 'Failed to fetch event details');
      } finally {
        setLoading(false);
      }
    };

    if (eventId) {
      fetchEvent();
    } else {
      setError('No event ID provided');
      setLoading(false);
    }
  }, [eventId]);

  const handleSubmit = async (eventData) => {
    setLoading(true);
    setError(null);
    
    try {
      const token = localStorage.getItem('adminToken');
      if (!token) {
        throw new Error('You are not logged in. Please log in and try again.');
      }

      // Log the data being sent
      console.log('Submitting event update:', {
        id: eventId,
        data: eventData
      });

      const updatedEvent = await eventService.updateEvent(eventId, eventData, token);
      console.log('Event updated successfully:', updatedEvent);
      
      setShowSuccess(true);
      
      // Delay navigation to show success message
      setTimeout(() => {
        navigate('/admin/dashboard');
      }, 1500);
    } catch (err) {
      console.error('Failed to update event:', err);
      setError(err.message || 'Failed to update event. Please try again.');
      setShowSuccess(false);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="relative">
      {error && (
        <div className="mb-4 p-4 bg-red-50 border-l-4 border-red-500 text-red-700">
          <p className="font-medium">Error:</p>
          <p>{error}</p>
        </div>
      )}
      
      {showSuccess && (
        <div className="mb-4 p-4 bg-green-50 border-l-4 border-green-500 text-green-700">
          <p>Event updated successfully! Redirecting to dashboard...</p>
        </div>
      )}

      <EventFormModal
        isOpen={true}
        onClose={() => navigate('/admin/dashboard')}
        event={event}
        onSubmit={handleSubmit}
      />
    </div>
  );
};

export default EventEditPage;

================
File: pages/LoginPage/index.js
================
// pages/admin/pages/LoginPage/index.js
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../../context/AuthContext';

const LoginPage = () => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();
  const { login, error: authError, isAuthenticated } = useAuth();

  // 监听认证状态变化
  useEffect(() => {
    console.log('Auth state changed:', { isAuthenticated });
    if (isAuthenticated) {
      const from = location.state?.from?.pathname || '/admin/dashboard';
      console.log('Redirecting to:', from);
      navigate(from, { replace: true });
    }
  }, [isAuthenticated, navigate, location]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      console.log('Submitting login with:', credentials);
      await login(credentials.username, credentials.password);
      console.log('Login successful');
    } catch (error) {
      console.error('Login submission error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-[#FAF6F0] py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-sm">
        {/* Logo & Header */}
        <div>
          <img
            src={process.env.PUBLIC_URL + "/images/Game-mixer-logo.avif"}
            alt="Game Mixer Logo"
            className="mx-auto h-16 w-16 p-2 bg-[#FFD200] rounded-lg"
          />
          <h2 className="mt-6 text-center text-3xl font-bold text-[#2C2C2C]">
            Admin Login
          </h2>
        </div>

        {/* Error Message */}
        {authError && (
          <div className="bg-red-50 border-l-4 border-red-400 p-4">
            <div className="flex">
              <div className="ml-3">
                <p className="text-sm text-red-700">
                  {authError}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Login Form */}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            {/* Username Field */}
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-[#2C2C2C]">
                Username
              </label>
              <input
                id="username"
                name="username"
                type="text"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md 
                         shadow-sm focus:outline-none focus:ring-[#FFD200] focus:border-[#FFD200]
                         text-[#2C2C2C]"
                value={credentials.username}
                onChange={handleChange}
                disabled={loading}
              />
            </div>

            {/* Password Field */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-[#2C2C2C]">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md 
                         shadow-sm focus:outline-none focus:ring-[#FFD200] focus:border-[#FFD200]
                         text-[#2C2C2C]"
                value={credentials.password}
                onChange={handleChange}
                disabled={loading}
              />
            </div>
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={loading}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md
                     shadow-sm text-[#2C2C2C] font-medium bg-[#FFD200] 
                     hover:bg-[#FFE566] focus:outline-none focus:ring-2 
                     focus:ring-offset-2 focus:ring-[#FFD200] transition-colors
                     ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-[#2C2C2C]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Signing in...
              </span>
            ) : (
              'Sign in'
            )}
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;

================
File: routes/index.js
================
// src/pages/admin/routes/index.js
import React from 'react';
import { Route } from 'react-router-dom';
import AdminLayout from '../layout/AdminLayout';
import DashboardPage from '../pages/DashboardPage';
import EventEditPage from '../pages/EventEditPage';
import EventCreatePage from '../pages/EventCreatePage';
import LoginPage from '../pages/LoginPage';

export const adminRoutes = [
  <Route key="admin" path="/admin" element={<AdminLayout />}>
    <Route path="login" element={<LoginPage />} />
    <Route path="dashboard" element={<DashboardPage />} />
    <Route path="events/new" element={<EventCreatePage />} />
    <Route path="events/edit/:eventId" element={<EventEditPage />} />
  </Route>
];

================
File: pages/Donation/index.jsx
================
// pages/Donation/index.jsx
import React from 'react';
import DonationOptions from '../../components/sections/Home/DonationOptions';
import { DonationProvider } from '../../context/DonationContext';

const DonationPage = () => {
  return (
    <DonationProvider>
      <div className="py-12">
        <DonationOptions />
      </div>
    </DonationProvider>
  );
};

export default DonationPage;

================
File: pages/Events/PastEventDetail/index.js
================
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { Calendar, MapPin } from 'lucide-react';
import PhotoModal from '../../../components/common/PhotoModal';
import { eventService } from '../../../services/api';

const PastEventDetail = () => {
  const { eventId } = useParams();
  const navigate = useNavigate();
  const [modalOpen, setModalOpen] = useState(false);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchEventDetails = async () => {
      try {
        setLoading(true);
        const eventData = await eventService.getEventById(eventId);

        // Check for video link
        if (eventData.video) {
          window.location.href = eventData.video;
          return;
        }

        // Check for report link
        const reportLink = eventData.links?.additionalInfo?.find(
          link => link.title.toLowerCase().includes('report')
        );

        if (reportLink) {
          window.location.href = reportLink.url;
          return;
        }

        setEvent(eventData);
      } catch (err) {
        console.error('Error fetching event:', err);
        setError('Failed to load event details');
      } finally {
        setLoading(false);
      }
    };

    if (eventId) {
      fetchEventDetails();
    }
  }, [eventId, navigate]);

  const handlePhotoClick = (index) => {
    setCurrentPhotoIndex(index);
    setModalOpen(true);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-[#FFD200] border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-[#2C2C2C]">Loading event details...</p>
        </div>
      </div>
    );
  }

  if (error || !event) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center text-red-600">
          <p>{error || 'Event not found'}</p>
          <Link 
            to="/events"
            className="mt-4 inline-block bg-[#FFD200] text-[#2C2C2C] px-6 py-2 rounded-lg hover:bg-[#FFE566]"
          >
            Back to Events
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto px-4 py-12">
      {/* Header Section */}
      <div className="text-center mb-12">
        {/* Tags */}
        {event.tags && event.tags.length > 0 && (
          <div className="flex justify-center gap-4 mb-6">
            {event.tags.map(tag => (
              <span key={tag} className="bg-gray-100 px-4 py-1 rounded-full text-sm text-gray-600">
                {tag}
              </span>
            ))}
          </div>
        )}

        {/* Title and Subtitle */}
        <h1 className="text-4xl font-bold mb-4">{event.title}</h1>
        {event.subtitle && (
          <p className="text-xl text-gray-600 mb-8">{event.subtitle}</p>
        )}
      </div>

      {/* Main Image */}
      {event.mainPicture && (
        <div className="mb-12 rounded-xl overflow-hidden">
          <img
            src={event.mainPicture}
            alt={event.title}
            className="w-full h-auto"
          />
        </div>
      )}

      {/* Event Details */}
      <div className="space-y-6">
        {/* Date and Location */}
        <div className="flex flex-wrap gap-6">
          <div className="flex items-center gap-2">
            <Calendar className="w-5 h-5 text-[#2C2C2C]" />
            <span className="text-lg">
              {new Date(event.startTime).toLocaleDateString()}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <MapPin className="w-5 h-5 text-[#2C2C2C]" />
            <span className="text-lg">{event.location}</span>
          </div>
        </div>

        {/* Description */}
        {event.description && (
          <div className="prose max-w-none">
            <p className="text-lg text-gray-700 leading-relaxed whitespace-pre-line">
              {event.description}
            </p>
          </div>
        )}

        {/* Photo Album */}
        {event.pictures && event.pictures.length > 0 && (
          <div className="space-y-4">
            <h2 className="text-2xl font-bold">Photo Album</h2>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {event.pictures.map((url, index) => (
                <button
                  key={index}
                  onClick={() => handlePhotoClick(index)}
                  className="relative aspect-square rounded-lg overflow-hidden group"
                >
                  <img
                    src={url}
                    alt={`${event.title} - Photo ${index + 1}`}
                    className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  />
                </button>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Photo Modal */}
      <PhotoModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        currentPhoto={{
          url: event.pictures?.[currentPhotoIndex],
          alt: `${event.title} - Photo ${currentPhotoIndex + 1}`,
          description: `Photo ${currentPhotoIndex + 1} of ${event.pictures?.length}`
        }}
        onNext={() => setCurrentPhotoIndex(prev => 
          prev < event.pictures.length - 1 ? prev + 1 : prev
        )}
        onPrevious={() => setCurrentPhotoIndex(prev => 
          prev > 0 ? prev - 1 : prev
        )}
        photos={event.pictures}
        currentIndex={currentPhotoIndex}
      />
    </div>
  );
};

export default PastEventDetail;

================
File: pages/Events/EventDetail.js
================
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { Calendar, Clock, MapPin } from 'lucide-react';
import PhotoModal from '../../components/common/PhotoModal';
import { eventService } from '../../services/api';

const EventDetailPage = () => {
  const { eventId } = useParams();
  const navigate = useNavigate();
  const [modalOpen, setModalOpen] = useState(false);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchEventDetails = async () => {
      try {
        setLoading(true);
        console.log('Fetching event with ID:', eventId);
        const eventData = await eventService.getEventById(eventId);
        console.log('Received event data:', eventData);

        // Check for video link - redirect if exists
        if (eventData.video) {
          window.location.href = eventData.video;
          return;
        }

        // Check for report link - redirect if exists
        const reportLink = eventData.links?.additionalInfo?.find(
          link => link.title.toLowerCase().includes('report')
        );
        if (reportLink) {
          window.location.href = reportLink.url;
          return;
        }

        setEvent(eventData);
        setError(null);
      } catch (err) {
        console.error('Error fetching event details:', err);
        setError('Failed to load event details. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    if (eventId) {
      fetchEventDetails();
    }
  }, [eventId, navigate]);

  const handlePhotoClick = (index) => {
    setCurrentPhotoIndex(index);
    setModalOpen(true);
  };

  const handleNextPhoto = () => {
    setCurrentPhotoIndex(prev => 
      prev < (event?.pictures?.length || 0) - 1 ? prev + 1 : prev
    );
  };

  const handlePreviousPhoto = () => {
    setCurrentPhotoIndex(prev => prev > 0 ? prev - 1 : prev);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-[#FFD200] border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-[#2C2C2C]">Loading event details...</p>
        </div>
      </div>
    );
  }

  if (error || !event) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center text-red-600">
          <p>{error || 'Event not found'}</p>
          <Link 
            to="/events"
            className="mt-4 inline-block bg-[#FFD200] text-[#2C2C2C] px-6 py-2 rounded-lg hover:bg-[#FFE566]"
          >
            Back to Events
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#FAF6F0]">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Title & Tags */}
        <div className="mb-8 text-center">
          {event.tags && event.tags.length > 0 && (
            <div className="flex justify-center gap-4 mb-6">
              {event.tags.map(tag => (
                <span key={tag} className="bg-white px-4 py-1 rounded-full text-sm text-gray-600">
                  {tag}
                </span>
              ))}
            </div>
          )}
          <h1 className="text-4xl font-bold text-[#2C2C2C] mb-4">{event.title}</h1>
          {event.subtitle && (
            <p className="text-xl text-gray-600">{event.subtitle}</p>
          )}
        </div>

        {/* Main Content */}
        <div className="bg-white rounded-xl shadow-sm overflow-hidden">
          {/* Main Image */}
          {event.mainPicture && (
            <div className="aspect-video w-full overflow-hidden">
              <img
                src={event.mainPicture}
                alt={event.title}
                className="w-full h-full object-cover"
              />
            </div>
          )}

          {/* Event Details */}
          <div className="p-8 space-y-6">
            {/* Date & Time */}
            <div className="flex flex-wrap gap-6">
              <div className="flex items-center gap-2">
                <Calendar className="w-5 h-5 text-[#2C2C2C]" />
                <span className="text-lg">
                  {new Date(event.startTime).toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Clock className="w-5 h-5 text-[#2C2C2C]" />
                <span className="text-lg">
                  {new Date(event.startTime).toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit'
                  })} - {
                  new Date(event.endTime).toLocaleTimeString([], { 
                    hour: '2-digit', 
                    minute: '2-digit'
                  })}
                </span>
              </div>
            </div>

            {/* Location */}
            {event.location && (
              <div className="flex items-center gap-2">
                <MapPin className="w-5 h-5 text-[#2C2C2C]" />
                <span className="text-lg">{event.location}</span>
              </div>
            )}

            {/* Description */}
            {event.description && (
              <div className="prose max-w-none pt-4">
                <p className="text-lg text-[#2C2C2C]/80 leading-relaxed whitespace-pre-line">
                  {event.description}
                </p>
              </div>
            )}

            {/* Links */}
            {event.links && (
              <div className="space-y-4 pt-4">
                {event.links.registration && (
                  <a 
                    href={event.links.registration.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block bg-[#FFD200] text-[#2C2C2C] px-8 py-3 rounded-lg font-bold hover:bg-[#FFE566] transition-colors text-center"
                  >
                    {event.links.registration.title}
                  </a>
                )}

                {event.links.location && (
                  <a 
                    href={event.links.location.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block text-[#6B90FF] hover:underline"
                  >
                    {event.links.location.title}
                  </a>
                )}

                {event.links.additionalInfo?.map((link, index) => (
                  <a 
                    key={index}
                    href={link.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="block text-[#6B90FF] hover:underline"
                  >
                    {link.title}
                  </a>
                ))}
              </div>
            )}

            {/* Photos */}
            {event.pictures && event.pictures.length > 0 && (
              <div className="space-y-4 pt-4">
                <h2 className="text-2xl font-bold">Photo Album</h2>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {event.pictures.map((url, index) => (
                    <button
                      key={index}
                      onClick={() => handlePhotoClick(index)}
                      className="relative aspect-square rounded-lg overflow-hidden group"
                    >
                      <img
                        src={url}
                        alt={`${event.title} - Photo ${index + 1}`}
                        className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                      />
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Back Button */}
        <div className="mt-8 text-center">
          <Link 
            to="/events"
            className="inline-block text-[#6B90FF] hover:underline"
          >
            ← Back to Events
          </Link>
        </div>
      </div>

      {/* Photo Modal */}
      <PhotoModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        currentPhoto={{
          url: event.pictures?.[currentPhotoIndex],
          alt: `${event.title} - Photo ${currentPhotoIndex + 1}`,
          description: `Photo ${currentPhotoIndex + 1} of ${event.pictures?.length}`
        }}
        onNext={handleNextPhoto}
        onPrevious={handlePreviousPhoto}
        photos={event.pictures?.map((url, index) => ({
          url,
          alt: `${event.title} - Photo ${index + 1}`,
          description: `Photo ${index + 1} of ${event.pictures.length}`
        })) || []}
        currentIndex={currentPhotoIndex}
      />
    </div>
  );
};

export default EventDetailPage;

================
File: pages/Events/index.js
================
import React, { useState, useEffect } from 'react';
import { Calendar, MapPin } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import PromotionalCarousel from '../../components/PromotionalCarousel';
import { eventService } from '../../services/api';

const EventsPage = () => {
  const navigate = useNavigate();
  const [activeFilter, setActiveFilter] = useState('All');
  const [events, setEvents] = useState({ upcoming: [], past: [] });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [tags, setTags] = useState([]);

  // Fetch events and tags when component mounts or filter changes
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const [eventsData, tagsData] = await Promise.all([
          eventService.getAllEvents(activeFilter !== 'All' ? activeFilter : ''),
          eventService.getEventTags()
        ]);
        
        setEvents(eventsData);
        setTags(['All', ...(Array.isArray(tagsData) ? tagsData : [])]);
        setError(null);
      } catch (err) {
        console.error('Error fetching events:', err);
        setError('Failed to load events. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [activeFilter]);

  // Format events for the carousel
  const promotionalEvents = events.upcoming?.map(event => ({
    id: event.id,
    title: event.title,
    location: event.location,
    date: new Date(event.startTime).toLocaleDateString(),
    time: new Date(event.startTime).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit'
    }),
    image: event.mainPicture,
    slug: event.id
  })) || [];

  const handlePastEventClick = async (event) => {
    try {
      // Get full event details
      const eventDetails = await eventService.getEventById(event.id);
      
      // Check for video link
      if (eventDetails.video) {
        window.location.href = eventDetails.video;
        return;
      }
      
      // Check for report link in additional links
      const reportLink = eventDetails.links?.additionalInfo?.find(
        link => link.title.toLowerCase().includes('report')
      );
      
      if (reportLink) {
        window.location.href = reportLink.url;
        return;
      }
      
      // If neither video nor report link exists, navigate to detail page
      navigate(`/events/past/${event.id}`);
    } catch (err) {
      console.error('Error handling past event click:', err);
      navigate(`/events/past/${event.id}`);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-[#FFD200] border-t-transparent rounded-full animate-spin mx-auto"></div>
          <p className="mt-4 text-[#2C2C2C]">Loading events...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center text-red-600">
          <p>{error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-4 bg-[#FFD200] text-[#2C2C2C] px-6 py-2 rounded-lg hover:bg-[#FFE566]"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Promotional Events Carousel */}
      {promotionalEvents.length > 0 && (
        <div className="w-full max-w-[1920px] mx-auto">
          <PromotionalCarousel events={promotionalEvents} />
        </div>
      )}

      {/* Past Events Section */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Filter Tabs */}
        <div className="overflow-x-auto mb-8">
          <div className="flex space-x-6 min-w-max">
            {tags.map((tag) => (
              <button
                key={tag}
                onClick={() => setActiveFilter(tag)}
                className={`px-4 py-2 rounded-full transition-colors ${
                  activeFilter === tag
                    ? 'bg-[#FFD200] text-black font-medium'
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>

        {/* Event Cards Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {events.past.map((event) => (
            <div 
              key={event.id} 
              className="bg-white rounded-lg shadow-md overflow-hidden cursor-pointer hover:shadow-lg transition-shadow"
              onClick={() => handlePastEventClick(event)}
            >
              <div className="relative h-48">
                <img
                  src={event.mainPicture}
                  alt={event.title}
                  className="w-full h-full object-cover"
                />
                {event.tags?.includes('promoted') && (
                  <div className="absolute top-4 left-4 bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
                    Just added
                  </div>
                )}
              </div>
              <div className="p-4">
                <h3 className="text-xl font-semibold mb-2">{event.title}</h3>
                <div className="space-y-2 text-gray-600">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4" />
                    <span>{new Date(event.startTime).toLocaleDateString()}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="w-4 h-4" />
                    <span>{event.location}</span>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default EventsPage;

================
File: pages/Home/index.jsx
================
import React from 'react';
import Hero from '../../components/sections/Home/Hero';
import ImpactMetrics from '../../components/sections/Home/ImpactMetrics';
import EventCarousel from '../../components/sections/Home/EventCarousel';
import MissionSection from '../../components/sections/Home/MissionSection';
import CallToAction from '../../components/sections/Home/CallToAction';
import SponsorsSection from '../../components/sections/Home/SponsorsSection';
import IndustryBreakdown from '../../components/sections/Home/IndustryBreakdown';
import TestimonialsSection from '../../components/sections/Home/TestimonialsSection';
import WordCloudSection from '../../components/sections/Home/WordCloudSection';
import ContactSection from '../../components/sections/Home/ContactSection';
import { DonationProvider } from '../../context/DonationContext';

const HomePage = () => {
  return (
    <DonationProvider>
      <div>
        <MissionSection />
        <ImpactMetrics />
        <EventCarousel />
        <IndustryBreakdown />
        <WordCloudSection/>
        <TestimonialsSection/>
        <CallToAction />
        <Hero />
        <SponsorsSection />
        <ContactSection />
      </div>
    </DonationProvider>
  );
};

export default HomePage;

================
File: services/api.js
================
// src/services/api.js
const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || '';

// Auth APIs
export const authAPI = {
  login: async (username, password) => {
    const response = await fetch(`${API_BASE_URL}/admin/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password })
    });
    return handleResponse(response);
  },

  getCurrentUser: async () => {
    const response = await fetch(`${API_BASE_URL}/admin/me`, {
      headers: getAuthHeaders()
    });
    return handleResponse(response);
  },

  createUser: async (userData) => {
    const response = await fetch(`${API_BASE_URL}/admin/users`, {
      method: 'POST',
      headers: { ...getAuthHeaders(), 'Content-Type': 'application/json' },
      body: JSON.stringify(userData)
    });
    return handleResponse(response);
  }
};

// Helper functions
const getAuthHeaders = () => {
  const token = localStorage.getItem('adminToken');
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
};

const handleResponse = async (response) => {
  const data = await response.json();
  if (!response.ok) {
    throw new Error(data.message || 'API request failed');
  }
  return data;
};

export default authAPI;

export const contactService = {
  // Submit contact form with email notifications
  async submitContactForm(formData) {
    const response = await fetch(`${API_BASE_URL}/contact`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        name: formData.name,
        email: formData.email,
        message: formData.message,
        category: formData.category,
        notifications: {
          user: {
            subject: 'Thank you for contacting Game Mixer',
            template: 'contact-confirmation',
            data: {
              name: formData.name,
              email: formData.email,
              message: formData.message,
              category: `**${formData.category}**` // Markdown for bold text
            }
          },
          admin: {
            subject: 'New Contact Form Submission',
            template: 'admin-notification',
            data: {
              name: formData.name,
              email: formData.email,
              message: formData.message,
              category: formData.category,
              submitTime: new Date().toISOString()
            }
          }
        }
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to submit contact form');
    }

    return response.json();
  }
};

export const eventService = {
    // Get all events
    async getAllEvents(tag = '') {
      const queryParams = tag ? `?tag=${encodeURIComponent(tag)}` : '';
      const response = await fetch(`${API_BASE_URL}/events${queryParams}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch events');
      }
      
      return response.json();
    },
  
    // Get event by ID
    async getEventById(id) {
      const response = await fetch(`${API_BASE_URL}/events/${id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
  
      if (!response.ok) {
        throw new Error('Failed to fetch event details');
      }
  
      return response.json();
    },
  
    // Create new event
    async createEvent(eventData, token) {
      const response = await fetch(`${API_BASE_URL}/admin/events`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(eventData)
      });
  
      if (!response.ok) {
        throw new Error('Failed to create event');
      }
  
      return response.json();
    },
  
    // Update event
    async updateEvent(id, eventData, token) {
        if (!id) {
          throw new Error('Event ID is required');
        }
    
        if (!token) {
          throw new Error('Authentication token is required');
        }
    
        try {
          console.log('Updating event with ID:', id);
          console.log('Update payload:', eventData);
          
          const response = await fetch(`${API_BASE_URL}/admin/events/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(eventData)
          });
    
          return handleResponse(response);
        } catch (error) {
          console.error('Event update error:', error);
          // Enhance error message with more details
          const enhancedError = new Error(
            `Failed to update event: ${error.message || 'Unknown error'}`
          );
          enhancedError.originalError = error;
          throw enhancedError;
        }
      },
  
    // Delete event
    async deleteEvent(id, token) {
      const response = await fetch(`${API_BASE_URL}/admin/events/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
  
      if (!response.ok) {
        throw new Error('Failed to delete event');
      }
  
      return response.json();
    },
  
    // Get event tags
    async getEventTags() {
      const response = await fetch(`${API_BASE_URL}/events/tags`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
  
      if (!response.ok) {
        throw new Error('Failed to fetch event tags');
      }
  
      return response.json();
    }
  };

================
File: styles/globals.css
================
/* Global style updates based on charity: water design */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary-yellow: #FFD200;
  --background-cream: #FAF6F0;
  --text-charcoal: #2C2C2C;
  --accent-blue: #6B90FF;
}

@layer base {
  body {
    @apply bg-[#FAF6F0] text-[#2C2C2C] overflow-x-hidden;
    font-family: 'sentinel', serif;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'Sentinel A', 'Sentinel B', serif;
  }
}

@layer components {
  .container-padding {
    @apply px-4 md:px-6 lg:px-8;
  }
  
  /* Primary Button */
  .btn-primary {
    @apply bg-[#FFD200] text-[#2C2C2C] px-8 py-3 rounded-lg font-bold 
    hover:bg-[#FFE566] transition-colors duration-300;
  }

  /* Navigation */
  .nav-item {
    @apply text-[#2C2C2C] hover:text-[#6B90FF] transition-colors duration-300;
  }

  /* Card Styles */
  .content-card {
    @apply bg-white rounded-lg shadow-sm p-6;
  }

  /* Form Elements */
  .form-input {
    @apply border border-gray-200 rounded-lg px-4 py-2 w-full focus:outline-none 
    focus:ring-2 focus:ring-[#FFD200] transition-all duration-300;
  }
}

/* Custom Typography */
.display-heading {
  @apply text-4xl md:text-5xl lg:text-6xl font-bold leading-tight;
  font-family: 'Sentinel A', 'Sentinel B', serif;
}

.section-heading {
  @apply text-3xl md:text-4xl font-bold mb-6;
  font-family: 'Sentinel A', 'Sentinel B', serif;
}

/* Layout Updates */
.main-layout {
  @apply min-h-screen bg-[#FAF6F0];
}

/* Header Styles */
.header {
  @apply sticky top-0 z-50 bg-white border-b border-gray-100;
}

/* Footer Updates */
.footer {
  @apply bg-white border-t border-gray-200;
}

================
File: App.js
================
import React from 'react';
import { HashRouter, Routes, Route, Navigate, Outlet } from 'react-router-dom';
import MainLayout from './components/layout/MainLayout';
import AdminLayout from './pages/admin/layout/AdminLayout';

// Public pages
import HomePage from './pages/Home';
import DonationPage from './pages/Donation';
import EventsPage from './pages/Events';
import EventDetailPage from './pages/Events/EventDetail';
import PastEventDetail from './pages/Events/PastEventDetail';

// Admin pages
import AdminLoginPage from './pages/admin/pages/LoginPage';
import AdminDashboardPage from './pages/admin/pages/DashboardPage';
import EventCreatePage from './pages/admin/pages/EventCreatePage';
import EventEditPage from './pages/admin/pages/EventEditPage';
import { AuthProvider } from './context/AuthContext';
import ProtectedRoute from './components/auth/ProtectedRoute';

import './styles/globals.css';
import { paths } from './config/paths';

function App() {
  return (
    <AuthProvider>
      <HashRouter basename={paths.BASE_PATH}>
        <Routes>
          {/* Admin Routes */}
          <Route path="/admin/login" element={<AdminLoginPage />} />
          <Route path="/admin" element={
            <ProtectedRoute>
              <AdminLayout>
                <Outlet />
              </AdminLayout>
            </ProtectedRoute>
          }>
            <Route path="dashboard" element={
              <ProtectedRoute>
                <AdminDashboardPage />
              </ProtectedRoute>
            } />
            <Route path="events/new" element={
              <ProtectedRoute>
                <EventCreatePage />
              </ProtectedRoute>
            } />
            <Route path="events/edit/:eventId" element={
              <ProtectedRoute>
                <EventEditPage />
              </ProtectedRoute>
            } />
            <Route index element={<Navigate to="/admin/dashboard" replace />} />
          </Route>

          {/* Public Routes */}
          <Route element={<MainLayout><Outlet /></MainLayout>}>
            <Route path="/" element={<HomePage />} />
            <Route path="/donate" element={<DonationPage />} />
            <Route path="/give" element={<DonationPage />} />
            <Route path="/events" element={<EventsPage />} />
            <Route path="/events/:eventId" element={<EventDetailPage />} />
            <Route path="/events/past/:eventId" element={<PastEventDetail />} />
          </Route>

          {/* Catch all redirect to home */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </HashRouter>
    </AuthProvider>
  );
}

export default App;

================
File: App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import reportWebVitals from './reportWebVitals';
import './styles/globals.css';  // 更改为新的样式文件路径

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

reportWebVitals();

================
File: reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';



================================================================
End of Codebase
================================================================
