{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "HandleContactLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleContact",
        "RetentionInDays": 14
      }
    },
    "HandlePaymentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handlePayment",
        "RetentionInDays": 14
      }
    },
    "VerifyPaymentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-verifyPayment",
        "RetentionInDays": 14
      }
    },
    "HandleMonetaryDonationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleMonetaryDonation",
        "RetentionInDays": 14
      }
    },
    "HandleGoodsDonationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleGoodsDonation",
        "RetentionInDays": 14
      }
    },
    "VerifyDonationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-verifyDonation",
        "RetentionInDays": 14
      }
    },
    "GetEventsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEvents",
        "RetentionInDays": 14
      }
    },
    "GetEventDetailsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEventDetails",
        "RetentionInDays": 14
      }
    },
    "GetTagsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getTags",
        "RetentionInDays": 14
      }
    },
    "CreateEventLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/game-mixer-backend-dev-createEvent",
        "RetentionInDays": 14
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "game-mixer-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev",
                    "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev/index/*",
                    "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev",
                    "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev/index/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "game-mixer-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HandleContactLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/contactHandler.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-handleContact",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandleContactLogGroup"
      ]
    },
    "HandlePaymentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/paymentHandler.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-handlePayment",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandlePaymentLogGroup"
      ]
    },
    "VerifyPaymentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/paymentHandler.verifyPayment",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-verifyPayment",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyPaymentLogGroup"
      ]
    },
    "HandleMonetaryDonationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/donationHandler.handleMonetaryDonation",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-handleMonetaryDonation",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandleMonetaryDonationLogGroup"
      ]
    },
    "HandleGoodsDonationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/donationHandler.handleGoodsDonation",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-handleGoodsDonation",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandleGoodsDonationLogGroup"
      ]
    },
    "VerifyDonationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/donationsHandler.verifyDonation",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-verifyDonation",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyDonationLogGroup"
      ]
    },
    "GetEventsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/eventsHandler.getEvents",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-getEvents",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEventsLogGroup"
      ]
    },
    "GetEventDetailsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/eventsHandler.getEventDetails",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-getEventDetails",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEventDetailsLogGroup"
      ]
    },
    "GetTagsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/eventsHandler.getTags",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-getTags",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTagsLogGroup"
      ]
    },
    "CreateEventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "S3Key": "serverless/game-mixer-backend/dev/1738733631503-2025-02-05T05:33:51.503Z/game-mixer-backend.zip"
        },
        "Handler": "src/handlers/eventsHandler.createEvent",
        "Runtime": "nodejs18.x",
        "FunctionName": "game-mixer-backend-dev-createEvent",
        "MemorySize": 256,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "SENDER_EMAIL": "admin@game-mixer.org",
            "TABLE_NAME": "game-mixer-backend-dev",
            "EVENTS_TABLE": "game-mixer-backend-events-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateEventLogGroup"
      ]
    },
    "HandleContactLambdaVersionjHbtHACl9yCzUZWECGIAMB349ZNGEZSj7g4QAVEEkbk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandleContactLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "HandlePaymentLambdaVersionWK7y7CgAbjfhf8syicEisz0fx5OxNwqAAJXCHRpZU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandlePaymentLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "VerifyPaymentLambdaVersionZtt5geznBN3zvYnROi2PquXAXT8N0hfzif5hEKA0m0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyPaymentLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "HandleMonetaryDonationLambdaVersionsprfuBDMDFZWkEanQ8YjtcmcTM2gM8ph2dzGD9hg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandleMonetaryDonationLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "HandleGoodsDonationLambdaVersionoKHhgucHcaPKhrnqnxRWhBLfpEEVJb2NpriawhtWqRs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandleGoodsDonationLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "VerifyDonationLambdaVersion0DfVUHhI0YAKZ5aqbEugjBVfEbJGswGgEsMqMzGgw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyDonationLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "GetEventsLambdaVersionWtODMB8GqSWxguFdKQNtAUjMJWiDsI0jkG9n1nrww4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEventsLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "GetEventDetailsLambdaVersionUrqOEn91mKeQR4xvZqEG7Ix6S32BjSDBdsoanyE0s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEventDetailsLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "GetTagsLambdaVersionv60Z9VWi18PPzXkAdR0Uf1Yq7veAzns25mfmsgWKNE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTagsLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "CreateEventLambdaVersion5jA2H9EQ4tw7Fyrpv25Dj52IUn8jTTZRvKsiqKHkJlw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateEventLambdaFunction"
        },
        "CodeSha256": "Ocj+BFSCvdK/Z881e9qC6iS0H7vCW1+3LIUgxV0nckA="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "game-mixer-backend-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceContact": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "contact",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePayment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "payment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceVerifyDashpayment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "verify-payment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDonations": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "donations",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDonationsMonetary": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDonations"
        },
        "PathPart": "monetary",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDonationsGoods": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDonations"
        },
        "PathPart": "goods",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDonationsVerify": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDonations"
        },
        "PathPart": "verify",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEvents": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "events",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEventsTags": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "PathPart": "tags",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodContactOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceContact"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPaymentOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePayment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodVerifyDashpaymentOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceVerifyDashpayment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDonationsMonetaryOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDonationsMonetary"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDonationsGoodsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDonationsGoods"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDonationsVerifyOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDonationsVerify"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventsIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEventsTagsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventsTags"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodContactPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceContact"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HandleContactLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HandleContactLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodPaymentPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePayment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HandlePaymentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HandlePaymentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodVerifyDashpaymentPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceVerifyDashpayment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VerifyPaymentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VerifyPaymentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDonationsMonetaryPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDonationsMonetary"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HandleMonetaryDonationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HandleMonetaryDonationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDonationsGoodsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDonationsGoods"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HandleGoodsDonationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HandleGoodsDonationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDonationsVerifyPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDonationsVerify"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "VerifyDonationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "VerifyDonationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEventsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEventsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEventsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEventsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEventDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEventDetailsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEventsTagsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEventsTags"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTagsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTagsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEventsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEvents"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateEventLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateEventLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1738733623231": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodContactOptions",
        "ApiGatewayMethodPaymentOptions",
        "ApiGatewayMethodVerifyDashpaymentOptions",
        "ApiGatewayMethodDonationsMonetaryOptions",
        "ApiGatewayMethodDonationsGoodsOptions",
        "ApiGatewayMethodDonationsVerifyOptions",
        "ApiGatewayMethodEventsOptions",
        "ApiGatewayMethodEventsIdVarOptions",
        "ApiGatewayMethodEventsTagsOptions",
        "ApiGatewayMethodContactPost",
        "ApiGatewayMethodPaymentPost",
        "ApiGatewayMethodVerifyDashpaymentPost",
        "ApiGatewayMethodDonationsMonetaryPost",
        "ApiGatewayMethodDonationsGoodsPost",
        "ApiGatewayMethodDonationsVerifyPost",
        "ApiGatewayMethodEventsGet",
        "ApiGatewayMethodEventsIdVarGet",
        "ApiGatewayMethodEventsTagsGet",
        "ApiGatewayMethodEventsPost"
      ]
    },
    "HandleContactLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HandleContactLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "HandlePaymentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HandlePaymentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VerifyPaymentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyPaymentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "HandleMonetaryDonationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HandleMonetaryDonationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "HandleGoodsDonationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HandleGoodsDonationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "VerifyDonationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyDonationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetEventsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEventsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetEventDetailsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEventDetailsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTagsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTagsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateEventLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateEventLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DonationsTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "game-mixer-backend-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "type",
            "AttributeType": "S"
          },
          {
            "AttributeName": "status",
            "AttributeType": "S"
          },
          {
            "AttributeName": "contactEmail",
            "AttributeType": "S"
          },
          {
            "AttributeName": "createdAt",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "typeIndex",
            "KeySchema": [
              {
                "AttributeName": "type",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createdAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "statusIndex",
            "KeySchema": [
              {
                "AttributeName": "status",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createdAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "emailIndex",
            "KeySchema": [
              {
                "AttributeName": "contactEmail",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createdAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          }
        ]
      }
    },
    "EventsTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "game-mixer-backend-events-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "startTime",
            "AttributeType": "S"
          },
          {
            "AttributeName": "tag",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "startTimeIndex",
            "KeySchema": [
              {
                "AttributeName": "startTime",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "tagIndex",
            "KeySchema": [
              {
                "AttributeName": "tag",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          }
        ]
      }
    },
    "GatewayResponseDefault4XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "GatewayResponseDefault5XX": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "DEFAULT_5XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
      "Export": {
        "Name": "sls-game-mixer-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "HandleContactLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandleContactLambdaVersionjHbtHACl9yCzUZWECGIAMB349ZNGEZSj7g4QAVEEkbk"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-HandleContactLambdaFunctionQualifiedArn"
      }
    },
    "HandlePaymentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandlePaymentLambdaVersionWK7y7CgAbjfhf8syicEisz0fx5OxNwqAAJXCHRpZU"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-HandlePaymentLambdaFunctionQualifiedArn"
      }
    },
    "VerifyPaymentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyPaymentLambdaVersionZtt5geznBN3zvYnROi2PquXAXT8N0hfzif5hEKA0m0"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-VerifyPaymentLambdaFunctionQualifiedArn"
      }
    },
    "HandleMonetaryDonationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandleMonetaryDonationLambdaVersionsprfuBDMDFZWkEanQ8YjtcmcTM2gM8ph2dzGD9hg"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-HandleMonetaryDonationLambdaFunctionQualifiedArn"
      }
    },
    "HandleGoodsDonationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandleGoodsDonationLambdaVersionoKHhgucHcaPKhrnqnxRWhBLfpEEVJb2NpriawhtWqRs"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-HandleGoodsDonationLambdaFunctionQualifiedArn"
      }
    },
    "VerifyDonationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyDonationLambdaVersion0DfVUHhI0YAKZ5aqbEugjBVfEbJGswGgEsMqMzGgw"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-VerifyDonationLambdaFunctionQualifiedArn"
      }
    },
    "GetEventsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEventsLambdaVersionWtODMB8GqSWxguFdKQNtAUjMJWiDsI0jkG9n1nrww4"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-GetEventsLambdaFunctionQualifiedArn"
      }
    },
    "GetEventDetailsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEventDetailsLambdaVersionUrqOEn91mKeQR4xvZqEG7Ix6S32BjSDBdsoanyE0s"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-GetEventDetailsLambdaFunctionQualifiedArn"
      }
    },
    "GetTagsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTagsLambdaVersionv60Z9VWi18PPzXkAdR0Uf1Yq7veAzns25mfmsgWKNE"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-GetTagsLambdaFunctionQualifiedArn"
      }
    },
    "CreateEventLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateEventLambdaVersion5jA2H9EQ4tw7Fyrpv25Dj52IUn8jTTZRvKsiqKHkJlw"
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-CreateEventLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-game-mixer-backend-dev-ServiceEndpoint"
      }
    }
  }
}