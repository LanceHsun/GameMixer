{
  "/Users/lancelin/03CS/program/game-mixer/backend/serverless.yml": {
    "versionFramework": "4.6.2",
    "servicePath": "/Users/lancelin/03CS/program/game-mixer/backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "game-mixer-backend",
      "frameworkVersion": "4",
      "custom": {
        "tableName": "game-mixer-backend-dev",
        "eventsTableName": "game-mixer-backend-events-dev",
        "adminUserPoolName": "game-mixer-backend-admin-pool-dev"
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "dev",
        "region": "us-west-2",
        "environment": {
          "SENDER_EMAIL": "admin@game-mixer.org",
          "TABLE_NAME": "game-mixer-backend-dev",
          "EVENTS_TABLE": "game-mixer-backend-events-dev",
          "COGNITO_USER_POOL_ID": {
            "Ref": "AdminUserPool"
          },
          "COGNITO_CLIENT_ID": {
            "Ref": "AdminUserPoolClient"
          }
        },
        "logRetentionInDays": 14,
        "apiGateway": {
          "minimumCompressionSize": 1024,
          "shouldStartNameWithService": true
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminInitiateAuth",
                  "cognito-idp:AdminCreateUser",
                  "cognito-idp:AdminSetUserPassword",
                  "cognito-idp:AdminGetUser"
                ],
                "Resource": {
                  "Fn::GetAtt": [
                    "AdminUserPool",
                    "Arn"
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:GetItem",
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": [
                  "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev",
                  "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev/index/*",
                  "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev",
                  "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev/index/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ses:SendEmail",
                  "ses:SendRawEmail"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AdminLoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-adminLogin",
                "RetentionInDays": 14
              }
            },
            "AdminCreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-adminCreateUser",
                "RetentionInDays": 14
              }
            },
            "GetCurrentAdminLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getCurrentAdmin",
                "RetentionInDays": 14
              }
            },
            "HandleContactLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleContact",
                "RetentionInDays": 14
              }
            },
            "HandleMonetaryDonationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleMonetaryDonation",
                "RetentionInDays": 14
              }
            },
            "HandleGoodsDonationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleGoodsDonation",
                "RetentionInDays": 14
              }
            },
            "VerifyDonationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-verifyDonation",
                "RetentionInDays": 14
              }
            },
            "GetEventsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEvents",
                "RetentionInDays": 14
              }
            },
            "GetEventDetailsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEventDetails",
                "RetentionInDays": 14
              }
            },
            "GetTagsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getTags",
                "RetentionInDays": 14
              }
            },
            "CreateEventLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-createEvent",
                "RetentionInDays": 14
              }
            },
            "UpdateEventLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-updateEvent",
                "RetentionInDays": 14
              }
            },
            "DeleteEventLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/game-mixer-backend-dev-deleteEvent",
                "RetentionInDays": 14
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "game-mixer-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "cognito-idp:AdminInitiateAuth",
                            "cognito-idp:AdminCreateUser",
                            "cognito-idp:AdminSetUserPassword",
                            "cognito-idp:AdminGetUser"
                          ],
                          "Resource": {
                            "Fn::GetAtt": [
                              "AdminUserPool",
                              "Arn"
                            ]
                          }
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:GetItem",
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev",
                            "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev/index/*",
                            "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev",
                            "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev/index/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "ses:SendEmail",
                            "ses:SendRawEmail"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "game-mixer-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AdminLoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/adminAuthHandler.handleLogin",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-adminLogin",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AdminLoginLogGroup"
              ]
            },
            "AdminCreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/adminAuthHandler.handleCreateUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-adminCreateUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AdminCreateUserLogGroup"
              ]
            },
            "GetCurrentAdminLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/adminAuthHandler.getCurrentUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-getCurrentAdmin",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCurrentAdminLogGroup"
              ]
            },
            "HandleContactLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/contactHandler.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-handleContact",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HandleContactLogGroup"
              ]
            },
            "HandleMonetaryDonationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/donationsHandler.handleMonetaryDonation",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-handleMonetaryDonation",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HandleMonetaryDonationLogGroup"
              ]
            },
            "HandleGoodsDonationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/donationsHandler.handleGoodsDonation",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-handleGoodsDonation",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HandleGoodsDonationLogGroup"
              ]
            },
            "VerifyDonationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/donationsHandler.verifyDonation",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-verifyDonation",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "VerifyDonationLogGroup"
              ]
            },
            "GetEventsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/eventsHandler.getEvents",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-getEvents",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetEventsLogGroup"
              ]
            },
            "GetEventDetailsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/eventsHandler.getEventDetails",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-getEventDetails",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetEventDetailsLogGroup"
              ]
            },
            "GetTagsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/eventsHandler.getTags",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-getTags",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTagsLogGroup"
              ]
            },
            "CreateEventLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/eventsHandler.createEvent",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-createEvent",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateEventLogGroup"
              ]
            },
            "UpdateEventLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/eventsHandler.updateEvent",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-updateEvent",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateEventLogGroup"
              ]
            },
            "DeleteEventLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                  "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
                },
                "Handler": "src/handlers/eventsHandler.deleteEvent",
                "Runtime": "nodejs18.x",
                "FunctionName": "game-mixer-backend-dev-deleteEvent",
                "MemorySize": 256,
                "Timeout": 29,
                "Environment": {
                  "Variables": {
                    "SENDER_EMAIL": "admin@game-mixer.org",
                    "TABLE_NAME": "game-mixer-backend-dev",
                    "EVENTS_TABLE": "game-mixer-backend-events-dev",
                    "COGNITO_USER_POOL_ID": {
                      "Ref": "AdminUserPool"
                    },
                    "COGNITO_CLIENT_ID": {
                      "Ref": "AdminUserPoolClient"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteEventLogGroup"
              ]
            },
            "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AdminLoginLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AdminCreateUserLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCurrentAdminLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HandleContactLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HandleMonetaryDonationLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HandleGoodsDonationLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "VerifyDonationLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetEventsLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetEventDetailsLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTagsLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateEventLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateEventLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteEventLambdaFunction"
                },
                "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "game-mixer-backend-dev",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": "",
                "MinimumCompressionSize": 1024
              }
            },
            "ApiGatewayResourceAdmin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "admin",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAdminLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAdmin"
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAdminUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAdmin"
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAdminMe": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAdmin"
                },
                "PathPart": "me",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAdminEvents": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAdmin"
                },
                "PathPart": "events",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAdminEventsIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAdminEvents"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceContact": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "contact",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDonations": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "donations",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDonationsMonetary": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceDonations"
                },
                "PathPart": "monetary",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDonationsGoods": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceDonations"
                },
                "PathPart": "goods",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDonationsVerify": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceDonations"
                },
                "PathPart": "verify",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceEvents": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "events",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceEventsIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceEvents"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceEventsTags": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceEvents"
                },
                "PathPart": "tags",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAdminLoginOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAdminUsersOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAdminMeOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminMe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodContactOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceContact"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDonationsMonetaryOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDonationsMonetary"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDonationsGoodsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDonationsGoods"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodDonationsVerifyOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDonationsVerify"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEventsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEvents"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEventsIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEventsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodEventsTagsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEventsTags"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAdminEventsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminEvents"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAdminEventsIdVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminEventsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAdminLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AdminLoginLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AdminLoginLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAdminUsersPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminUsers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "AdminAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AdminCreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AdminAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAdminMeGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminMe"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "AdminAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetCurrentAdminLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AdminAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodContactPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceContact"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "HandleContactLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "HandleContactLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDonationsMonetaryPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDonationsMonetary"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "HandleMonetaryDonationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "HandleMonetaryDonationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDonationsGoodsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDonationsGoods"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "HandleGoodsDonationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "HandleGoodsDonationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDonationsVerifyPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDonationsVerify"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "VerifyDonationLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "VerifyDonationLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEventsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEvents"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetEventsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetEventsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEventsIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEventsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetEventDetailsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetEventDetailsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodEventsTagsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceEventsTags"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetTagsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetTagsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAdminEventsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminEvents"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "AdminAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateEventLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AdminAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAdminEventsIdVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminEventsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "AdminAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateEventLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AdminAuthorizerApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodAdminEventsIdVarDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAdminEventsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "COGNITO_USER_POOLS",
                "AuthorizerId": {
                  "Ref": "AdminAuthorizerApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteEventLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AdminAuthorizerApiGatewayAuthorizer"
              ]
            },
            "AdminAuthorizerApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "AuthorizerResultTtlInSeconds": 300,
                "IdentitySource": "method.request.header.Authorization",
                "Name": "adminAuthorizer",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "Type": "COGNITO_USER_POOLS",
                "ProviderARNs": [
                  {
                    "Fn::GetAtt": [
                      "AdminUserPool",
                      "Arn"
                    ]
                  }
                ]
              }
            },
            "ApiGatewayDeployment1738881156512": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodAdminLoginOptions",
                "ApiGatewayMethodAdminUsersOptions",
                "ApiGatewayMethodAdminMeOptions",
                "ApiGatewayMethodContactOptions",
                "ApiGatewayMethodDonationsMonetaryOptions",
                "ApiGatewayMethodDonationsGoodsOptions",
                "ApiGatewayMethodDonationsVerifyOptions",
                "ApiGatewayMethodEventsOptions",
                "ApiGatewayMethodEventsIdVarOptions",
                "ApiGatewayMethodEventsTagsOptions",
                "ApiGatewayMethodAdminEventsOptions",
                "ApiGatewayMethodAdminEventsIdVarOptions",
                "ApiGatewayMethodAdminLoginPost",
                "ApiGatewayMethodAdminUsersPost",
                "ApiGatewayMethodAdminMeGet",
                "ApiGatewayMethodContactPost",
                "ApiGatewayMethodDonationsMonetaryPost",
                "ApiGatewayMethodDonationsGoodsPost",
                "ApiGatewayMethodDonationsVerifyPost",
                "ApiGatewayMethodEventsGet",
                "ApiGatewayMethodEventsIdVarGet",
                "ApiGatewayMethodEventsTagsGet",
                "ApiGatewayMethodAdminEventsPost",
                "ApiGatewayMethodAdminEventsIdVarPut",
                "ApiGatewayMethodAdminEventsIdVarDelete"
              ]
            },
            "AdminLoginLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AdminLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AdminCreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AdminCreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetCurrentAdminLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCurrentAdminLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HandleContactLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HandleContactLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HandleMonetaryDonationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HandleMonetaryDonationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HandleGoodsDonationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HandleGoodsDonationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "VerifyDonationLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "VerifyDonationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetEventsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetEventsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetEventDetailsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetEventDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetTagsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTagsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateEventLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateEventLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateEventLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateEventLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteEventLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteEventLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AdminUserPool": {
              "Type": "AWS::Cognito::UserPool",
              "Properties": {
                "UserPoolName": "game-mixer-backend-admin-pool-dev",
                "AdminCreateUserConfig": {
                  "AllowAdminCreateUserOnly": true
                },
                "Policies": {
                  "PasswordPolicy": "<REDACTED>"
                },
                "Schema": [
                  {
                    "Name": "email",
                    "Required": true,
                    "Mutable": true,
                    "AttributeDataType": "String"
                  }
                ]
              }
            },
            "AdminUserPoolClient": {
              "Type": "AWS::Cognito::UserPoolClient",
              "Properties": {
                "UserPoolId": {
                  "Ref": "AdminUserPool"
                },
                "ClientName": "game-mixer-backend-admin-client-dev",
                "GenerateSecret": "<REDACTED>",
                "ExplicitAuthFlows": [
                  "ALLOW_ADMIN_USER_PASSWORD_AUTH",
                  "ALLOW_REFRESH_TOKEN_AUTH"
                ]
              }
            },
            "DonationsTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "TableName": "game-mixer-backend-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "type",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "status",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "contactEmail",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "createdAt",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "typeIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "type",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "createdAt",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "statusIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "status",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "createdAt",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "emailIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "contactEmail",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "createdAt",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "TimeToLiveSpecification": {
                  "AttributeName": "ttl",
                  "Enabled": true
                },
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  }
                ]
              }
            },
            "EventsTable": {
              "Type": "AWS::DynamoDB::Table",
              "DeletionPolicy": "Retain",
              "Properties": {
                "TableName": "game-mixer-backend-events-dev",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "startTime",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "tag",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "startTimeIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "startTime",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "tagIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "tag",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "TimeToLiveSpecification": {
                  "AttributeName": "ttl",
                  "Enabled": true
                },
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  }
                ]
              }
            },
            "GatewayResponseDefault4XX": {
              "Type": "AWS::ApiGateway::GatewayResponse",
              "Properties": {
                "ResponseParameters": {
                  "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                  "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
                },
                "ResponseType": "DEFAULT_4XX",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "GatewayResponseDefault5XX": {
              "Type": "AWS::ApiGateway::GatewayResponse",
              "Properties": {
                "ResponseParameters": {
                  "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                  "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
                },
                "ResponseType": "DEFAULT_5XX",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "Export": {
                "Name": "sls-game-mixer-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "AdminLoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-AdminLoginLambdaFunctionQualifiedArn"
              }
            },
            "AdminCreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-AdminCreateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetCurrentAdminLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-GetCurrentAdminLambdaFunctionQualifiedArn"
              }
            },
            "HandleContactLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-HandleContactLambdaFunctionQualifiedArn"
              }
            },
            "HandleMonetaryDonationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-HandleMonetaryDonationLambdaFunctionQualifiedArn"
              }
            },
            "HandleGoodsDonationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-HandleGoodsDonationLambdaFunctionQualifiedArn"
              }
            },
            "VerifyDonationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-VerifyDonationLambdaFunctionQualifiedArn"
              }
            },
            "GetEventsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-GetEventsLambdaFunctionQualifiedArn"
              }
            },
            "GetEventDetailsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-GetEventDetailsLambdaFunctionQualifiedArn"
              }
            },
            "GetTagsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-GetTagsLambdaFunctionQualifiedArn"
              }
            },
            "CreateEventLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-CreateEventLambdaFunctionQualifiedArn"
              }
            },
            "UpdateEventLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-UpdateEventLambdaFunctionQualifiedArn"
              }
            },
            "DeleteEventLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c"
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-DeleteEventLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-game-mixer-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "adminLogin": {
          "handler": "src/handlers/adminAuthHandler.handleLogin",
          "events": [
            {
              "http": {
                "path": "admin/login",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "game-mixer-backend-dev-adminLogin",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ"
        },
        "adminCreateUser": {
          "handler": "src/handlers/adminAuthHandler.handleCreateUser",
          "events": [
            {
              "http": {
                "path": "admin/users",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "adminAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AdminUserPool",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "game-mixer-backend-dev-adminCreateUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8"
        },
        "getCurrentAdmin": {
          "handler": "src/handlers/adminAuthHandler.getCurrentUser",
          "events": [
            {
              "http": {
                "path": "admin/me",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "adminAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AdminUserPool",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "game-mixer-backend-dev-getCurrentAdmin",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo"
        },
        "handleContact": {
          "handler": "src/handlers/contactHandler.handler",
          "events": [
            {
              "http": {
                "path": "contact",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-handleContact",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI"
        },
        "handleMonetaryDonation": {
          "handler": "src/handlers/donationsHandler.handleMonetaryDonation",
          "events": [
            {
              "http": {
                "path": "donations/monetary",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-handleMonetaryDonation",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc"
        },
        "handleGoodsDonation": {
          "handler": "src/handlers/donationsHandler.handleGoodsDonation",
          "events": [
            {
              "http": {
                "path": "donations/goods",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-handleGoodsDonation",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8"
        },
        "verifyDonation": {
          "handler": "src/handlers/donationsHandler.verifyDonation",
          "events": [
            {
              "http": {
                "path": "donations/verify",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-verifyDonation",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U"
        },
        "getEvents": {
          "handler": "src/handlers/eventsHandler.getEvents",
          "events": [
            {
              "http": {
                "path": "events",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-getEvents",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg"
        },
        "getEventDetails": {
          "handler": "src/handlers/eventsHandler.getEventDetails",
          "events": [
            {
              "http": {
                "path": "events/{id}",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-getEventDetails",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ"
        },
        "getTags": {
          "handler": "src/handlers/eventsHandler.getTags",
          "events": [
            {
              "http": {
                "path": "events/tags",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-getTags",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88"
        },
        "createEvent": {
          "handler": "src/handlers/eventsHandler.createEvent",
          "events": [
            {
              "http": {
                "path": "admin/events",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "adminAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AdminUserPool",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-createEvent",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads"
        },
        "updateEvent": {
          "handler": "src/handlers/eventsHandler.updateEvent",
          "events": [
            {
              "http": {
                "path": "admin/events/{id}",
                "method": "put",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "adminAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AdminUserPool",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-updateEvent",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY"
        },
        "deleteEvent": {
          "handler": "src/handlers/eventsHandler.deleteEvent",
          "events": [
            {
              "http": {
                "path": "admin/events/{id}",
                "method": "delete",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "DELETE"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "authorizer": {
                  "type": "COGNITO_USER_POOLS",
                  "name": "adminAuthorizer",
                  "arn": {
                    "Fn::GetAtt": [
                      "AdminUserPool",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "game-mixer-backend-dev-deleteEvent",
          "package": {},
          "memory": 256,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c"
        }
      },
      "resources": {
        "Resources": {
          "AdminUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "game-mixer-backend-admin-pool-dev",
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": true
              },
              "Policies": {
                "PasswordPolicy": "<REDACTED>"
              },
              "Schema": [
                {
                  "Name": "email",
                  "Required": true,
                  "Mutable": true,
                  "AttributeDataType": "String"
                }
              ]
            }
          },
          "AdminUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "UserPoolId": {
                "Ref": "AdminUserPool"
              },
              "ClientName": "game-mixer-backend-admin-client-dev",
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ALLOW_ADMIN_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ]
            }
          },
          "DonationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "game-mixer-backend-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "contactEmail",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "typeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "type",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "statusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "emailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "contactEmail",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "EventsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "game-mixer-backend-events-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "startTime",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tag",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "startTimeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "startTime",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "tagIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tag",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-west-2",
      "environment": {
        "SENDER_EMAIL": "admin@game-mixer.org",
        "TABLE_NAME": "game-mixer-backend-dev",
        "EVENTS_TABLE": "game-mixer-backend-events-dev",
        "COGNITO_USER_POOL_ID": {
          "Ref": "AdminUserPool"
        },
        "COGNITO_CLIENT_ID": {
          "Ref": "AdminUserPoolClient"
        }
      },
      "logRetentionInDays": 14,
      "apiGateway": {
        "minimumCompressionSize": 1024,
        "shouldStartNameWithService": true
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:AdminInitiateAuth",
                "cognito-idp:AdminCreateUser",
                "cognito-idp:AdminSetUserPassword",
                "cognito-idp:AdminGetUser"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "AdminUserPool",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev",
                "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev/index/*",
                "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev",
                "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev/index/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AdminLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-adminLogin",
              "RetentionInDays": 14
            }
          },
          "AdminCreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-adminCreateUser",
              "RetentionInDays": 14
            }
          },
          "GetCurrentAdminLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getCurrentAdmin",
              "RetentionInDays": 14
            }
          },
          "HandleContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleContact",
              "RetentionInDays": 14
            }
          },
          "HandleMonetaryDonationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleMonetaryDonation",
              "RetentionInDays": 14
            }
          },
          "HandleGoodsDonationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleGoodsDonation",
              "RetentionInDays": 14
            }
          },
          "VerifyDonationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-verifyDonation",
              "RetentionInDays": 14
            }
          },
          "GetEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEvents",
              "RetentionInDays": 14
            }
          },
          "GetEventDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEventDetails",
              "RetentionInDays": 14
            }
          },
          "GetTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getTags",
              "RetentionInDays": 14
            }
          },
          "CreateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-createEvent",
              "RetentionInDays": 14
            }
          },
          "UpdateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-updateEvent",
              "RetentionInDays": 14
            }
          },
          "DeleteEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/game-mixer-backend-dev-deleteEvent",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "game-mixer-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cognito-idp:AdminInitiateAuth",
                          "cognito-idp:AdminCreateUser",
                          "cognito-idp:AdminSetUserPassword",
                          "cognito-idp:AdminGetUser"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "AdminUserPool",
                            "Arn"
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:GetItem",
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev",
                          "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev/index/*",
                          "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev",
                          "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev/index/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ses:SendEmail",
                          "ses:SendRawEmail"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "game-mixer-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AdminLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/adminAuthHandler.handleLogin",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-adminLogin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminLoginLogGroup"
            ]
          },
          "AdminCreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/adminAuthHandler.handleCreateUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-adminCreateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AdminCreateUserLogGroup"
            ]
          },
          "GetCurrentAdminLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/adminAuthHandler.getCurrentUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-getCurrentAdmin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCurrentAdminLogGroup"
            ]
          },
          "HandleContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/contactHandler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-handleContact",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleContactLogGroup"
            ]
          },
          "HandleMonetaryDonationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/donationsHandler.handleMonetaryDonation",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-handleMonetaryDonation",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleMonetaryDonationLogGroup"
            ]
          },
          "HandleGoodsDonationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/donationsHandler.handleGoodsDonation",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-handleGoodsDonation",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleGoodsDonationLogGroup"
            ]
          },
          "VerifyDonationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/donationsHandler.verifyDonation",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-verifyDonation",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyDonationLogGroup"
            ]
          },
          "GetEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/eventsHandler.getEvents",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-getEvents",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventsLogGroup"
            ]
          },
          "GetEventDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/eventsHandler.getEventDetails",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-getEventDetails",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventDetailsLogGroup"
            ]
          },
          "GetTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/eventsHandler.getTags",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-getTags",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagsLogGroup"
            ]
          },
          "CreateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/eventsHandler.createEvent",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-createEvent",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEventLogGroup"
            ]
          },
          "UpdateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/eventsHandler.updateEvent",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-updateEvent",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEventLogGroup"
            ]
          },
          "DeleteEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
                "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
              },
              "Handler": "src/handlers/eventsHandler.deleteEvent",
              "Runtime": "nodejs18.x",
              "FunctionName": "game-mixer-backend-dev-deleteEvent",
              "MemorySize": 256,
              "Timeout": 29,
              "Environment": {
                "Variables": {
                  "SENDER_EMAIL": "admin@game-mixer.org",
                  "TABLE_NAME": "game-mixer-backend-dev",
                  "EVENTS_TABLE": "game-mixer-backend-events-dev",
                  "COGNITO_USER_POOL_ID": {
                    "Ref": "AdminUserPool"
                  },
                  "COGNITO_CLIENT_ID": {
                    "Ref": "AdminUserPoolClient"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEventLogGroup"
            ]
          },
          "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminLoginLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AdminCreateUserLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCurrentAdminLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleContactLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleMonetaryDonationLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleGoodsDonationLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyDonationLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventsLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventDetailsLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagsLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEventLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEventLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEventLambdaFunction"
              },
              "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "game-mixer-backend-dev",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceAdmin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "admin",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminMe": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "me",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminEventsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdminEvents"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContact": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contact",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDonations": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "donations",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDonationsMonetary": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDonations"
              },
              "PathPart": "monetary",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDonationsGoods": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDonations"
              },
              "PathPart": "goods",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDonationsVerify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDonations"
              },
              "PathPart": "verify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventsTags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "PathPart": "tags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminMeOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContact"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDonationsMonetaryOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDonationsMonetary"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDonationsGoodsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDonationsGoods"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDonationsVerifyOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDonationsVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsTagsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsTags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminEventsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminEventsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminLoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminLoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AdminAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AdminCreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAdminMeGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminMe"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AdminAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCurrentAdminLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodContactPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContact"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HandleContactLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HandleContactLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDonationsMonetaryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDonationsMonetary"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HandleMonetaryDonationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HandleMonetaryDonationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDonationsGoodsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDonationsGoods"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HandleGoodsDonationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HandleGoodsDonationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDonationsVerifyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDonationsVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "VerifyDonationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "VerifyDonationLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEventDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEventDetailsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsTagsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsTags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminEventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AdminAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAdminEventsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AdminAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAdminEventsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "AdminAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AdminAuthorizerApiGatewayAuthorizer"
            ]
          },
          "AdminAuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "adminAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::GetAtt": [
                    "AdminUserPool",
                    "Arn"
                  ]
                }
              ]
            }
          },
          "ApiGatewayDeployment1738881156512": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAdminLoginOptions",
              "ApiGatewayMethodAdminUsersOptions",
              "ApiGatewayMethodAdminMeOptions",
              "ApiGatewayMethodContactOptions",
              "ApiGatewayMethodDonationsMonetaryOptions",
              "ApiGatewayMethodDonationsGoodsOptions",
              "ApiGatewayMethodDonationsVerifyOptions",
              "ApiGatewayMethodEventsOptions",
              "ApiGatewayMethodEventsIdVarOptions",
              "ApiGatewayMethodEventsTagsOptions",
              "ApiGatewayMethodAdminEventsOptions",
              "ApiGatewayMethodAdminEventsIdVarOptions",
              "ApiGatewayMethodAdminLoginPost",
              "ApiGatewayMethodAdminUsersPost",
              "ApiGatewayMethodAdminMeGet",
              "ApiGatewayMethodContactPost",
              "ApiGatewayMethodDonationsMonetaryPost",
              "ApiGatewayMethodDonationsGoodsPost",
              "ApiGatewayMethodDonationsVerifyPost",
              "ApiGatewayMethodEventsGet",
              "ApiGatewayMethodEventsIdVarGet",
              "ApiGatewayMethodEventsTagsGet",
              "ApiGatewayMethodAdminEventsPost",
              "ApiGatewayMethodAdminEventsIdVarPut",
              "ApiGatewayMethodAdminEventsIdVarDelete"
            ]
          },
          "AdminLoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminCreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AdminCreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCurrentAdminLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCurrentAdminLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HandleContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleContactLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HandleMonetaryDonationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleMonetaryDonationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HandleGoodsDonationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleGoodsDonationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "VerifyDonationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyDonationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEventDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AdminUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "game-mixer-backend-admin-pool-dev",
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": true
              },
              "Policies": {
                "PasswordPolicy": "<REDACTED>"
              },
              "Schema": [
                {
                  "Name": "email",
                  "Required": true,
                  "Mutable": true,
                  "AttributeDataType": "String"
                }
              ]
            }
          },
          "AdminUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "UserPoolId": {
                "Ref": "AdminUserPool"
              },
              "ClientName": "game-mixer-backend-admin-client-dev",
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ALLOW_ADMIN_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ]
            }
          },
          "DonationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "game-mixer-backend-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "contactEmail",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "typeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "type",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "statusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "emailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "contactEmail",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "EventsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "TableName": "game-mixer-backend-events-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "startTime",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tag",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "startTimeIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "startTime",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "tagIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "tag",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
            "Export": {
              "Name": "sls-game-mixer-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "AdminLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-AdminLoginLambdaFunctionQualifiedArn"
            }
          },
          "AdminCreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-AdminCreateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetCurrentAdminLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-GetCurrentAdminLambdaFunctionQualifiedArn"
            }
          },
          "HandleContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-HandleContactLambdaFunctionQualifiedArn"
            }
          },
          "HandleMonetaryDonationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-HandleMonetaryDonationLambdaFunctionQualifiedArn"
            }
          },
          "HandleGoodsDonationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-HandleGoodsDonationLambdaFunctionQualifiedArn"
            }
          },
          "VerifyDonationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-VerifyDonationLambdaFunctionQualifiedArn"
            }
          },
          "GetEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-GetEventsLambdaFunctionQualifiedArn"
            }
          },
          "GetEventDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-GetEventDetailsLambdaFunctionQualifiedArn"
            }
          },
          "GetTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-GetTagsLambdaFunctionQualifiedArn"
            }
          },
          "CreateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-CreateEventLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-UpdateEventLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c"
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-DeleteEventLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-game-mixer-backend-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: game-mixer-backend\n\nframeworkVersion: '4'\n\ncustom:\n  tableName: ${self:service}-${sls:stage}\n  eventsTableName: ${self:service}-events-${sls:stage}\n  adminUserPoolName: ${self:service}-admin-pool-${sls:stage}\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-west-2'}\n  environment:\n    SENDER_EMAIL: ${env:SENDER_EMAIL}\n    TABLE_NAME: ${self:custom.tableName}\n    EVENTS_TABLE: ${self:custom.eventsTableName}\n    COGNITO_USER_POOL_ID: !Ref AdminUserPool\n    COGNITO_CLIENT_ID: !Ref AdminUserPoolClient\n  logRetentionInDays: 14\n  apiGateway:\n    minimumCompressionSize: 1024\n    shouldStartNameWithService: true\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - cognito-idp:AdminInitiateAuth\n            - cognito-idp:AdminCreateUser\n            - cognito-idp:AdminSetUserPassword\n            - cognito-idp:AdminGetUser\n          Resource: !GetAtt AdminUserPool.Arn\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:GetItem\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n          Resource: \n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.TABLE_NAME}\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.TABLE_NAME}/index/*\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.EVENTS_TABLE}\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.EVENTS_TABLE}/index/*\"\n        - Effect: Allow\n          Action:\n            - ses:SendEmail\n            - ses:SendRawEmail\n          Resource: \"*\"\n        - Effect: Allow\n          Action:\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:PutLogEvents\n          Resource: \"*\"\n\nfunctions:\n  # Admin Auth Functions\n  adminLogin:\n    handler: src/handlers/adminAuthHandler.handleLogin\n    events:\n      - http:\n          path: admin/login\n          method: post\n          cors: true\n\n  adminCreateUser:\n    handler: src/handlers/adminAuthHandler.handleCreateUser\n    events:\n      - http:\n          path: admin/users\n          method: post\n          cors: true\n          authorizer:\n            name: adminAuthorizer\n            type: COGNITO_USER_POOLS\n            arn: !GetAtt AdminUserPool.Arn\n\n  getCurrentAdmin:\n    handler: src/handlers/adminAuthHandler.getCurrentUser\n    events:\n      - http:\n          path: admin/me\n          method: get\n          cors: true\n          authorizer:\n            name: adminAuthorizer\n            type: COGNITO_USER_POOLS\n            arn: !GetAtt AdminUserPool.Arn\n\n  # Contact Handler\n  handleContact:\n    handler: src/handlers/contactHandler.handler\n    events:\n      - http:\n          path: contact\n          method: post\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  # Donation Handlers\n  handleMonetaryDonation:\n    handler: src/handlers/donationsHandler.handleMonetaryDonation\n    events:\n      - http:\n          path: donations/monetary\n          method: post\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  handleGoodsDonation:\n    handler: src/handlers/donationsHandler.handleGoodsDonation\n    events:\n      - http:\n          path: donations/goods\n          method: post\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  verifyDonation:\n    handler: src/handlers/donationsHandler.verifyDonation\n    events:\n      - http:\n          path: donations/verify\n          method: post\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  # Event Handlers - Public\n  getEvents:\n    handler: src/handlers/eventsHandler.getEvents\n    events:\n      - http:\n          path: events\n          method: get\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  getEventDetails:\n    handler: src/handlers/eventsHandler.getEventDetails\n    events:\n      - http:\n          path: events/{id}\n          method: get\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  getTags:\n    handler: src/handlers/eventsHandler.getTags\n    events:\n      - http:\n          path: events/tags\n          method: get\n          cors: true\n    memorySize: 256\n    timeout: 29\n\n  # Event Handlers - Admin\n  createEvent:\n    handler: src/handlers/eventsHandler.createEvent\n    events:\n      - http:\n          path: admin/events\n          method: post\n          cors: true\n          authorizer:\n            name: adminAuthorizer\n            type: COGNITO_USER_POOLS\n            arn: !GetAtt AdminUserPool.Arn\n    memorySize: 256\n    timeout: 29\n\n  updateEvent:\n    handler: src/handlers/eventsHandler.updateEvent\n    events:\n      - http:\n          path: admin/events/{id}\n          method: put\n          cors: true\n          authorizer:\n            name: adminAuthorizer\n            type: COGNITO_USER_POOLS\n            arn: !GetAtt AdminUserPool.Arn\n    memorySize: 256\n    timeout: 29\n\n  deleteEvent:\n    handler: src/handlers/eventsHandler.deleteEvent\n    events:\n      - http:\n          path: admin/events/{id}\n          method: delete\n          cors: true\n          authorizer:\n            name: adminAuthorizer\n            type: COGNITO_USER_POOLS\n            arn: !GetAtt AdminUserPool.Arn\n    memorySize: 256\n    timeout: 29\n\nresources:\n  Resources:\n    # Admin Cognito Resources\n    AdminUserPool:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: ${self:custom.adminUserPoolName}\n        AdminCreateUserConfig:\n          AllowAdminCreateUserOnly: true\n        Policies:\n          PasswordPolicy:\n            MinimumLength: 8\n            RequireLowercase: true\n            RequireNumbers: true\n            RequireSymbols: true\n            RequireUppercase: true\n        Schema:\n          - Name: email\n            Required: true\n            Mutable: true\n            AttributeDataType: String\n\n    AdminUserPoolClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        UserPoolId: !Ref AdminUserPool\n        ClientName: ${self:service}-admin-client-${sls:stage}\n        GenerateSecret: false\n        ExplicitAuthFlows:\n          - ALLOW_ADMIN_USER_PASSWORD_AUTH\n          - ALLOW_REFRESH_TOKEN_AUTH\n\n    # DynamoDB Tables\n    DonationsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:custom.tableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: type\n            AttributeType: S\n          - AttributeName: status\n            AttributeType: S\n          - AttributeName: contactEmail\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: typeIndex\n            KeySchema:\n              - AttributeName: type\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n          - IndexName: statusIndex\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n          - IndexName: emailIndex\n            KeySchema:\n              - AttributeName: contactEmail\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n\n    EventsTable:\n      Type: AWS::DynamoDB::Table\n      DeletionPolicy: Retain\n      Properties:\n        TableName: ${self:custom.eventsTableName}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: startTime\n            AttributeType: S\n          - AttributeName: tag\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: startTimeIndex\n            KeySchema:\n              - AttributeName: startTime\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n          - IndexName: tagIndex\n            KeySchema:\n              - AttributeName: tag\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n\n    GatewayResponseDefault4XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_4XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'\n\n    GatewayResponseDefault5XX:\n      Type: 'AWS::ApiGateway::GatewayResponse'\n      Properties:\n        ResponseParameters:\n          gatewayresponse.header.Access-Control-Allow-Origin: \"'*'\"\n          gatewayresponse.header.Access-Control-Allow-Headers: \"'*'\"\n        ResponseType: DEFAULT_5XX\n        RestApiId:\n          Ref: 'ApiGatewayRestApi'",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "0601fcfc-8214-4e23-9bea-c6c3bceed861",
    "orgName": "gamemixer",
    "userId": "K0KHsNX1sqycGSYc1t",
    "userName": "gamemixer",
    "serviceProviderAwsAccountId": "242201288258",
    "serviceProviderAwsCfStackName": "game-mixer-backend-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-west-2:242201288258:stack/game-mixer-backend-dev/29ae42e0-e380-11ef-9f92-0ac4e72d80ad",
    "serviceProviderAwsCfStackCreated": "2025-02-05T05:15:06.749Z",
    "serviceProviderAwsCfStackUpdated": "2025-02-06T22:26:31.977Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "VerifyDonationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-verifyDonation:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-VerifyDonationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetEventDetailsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-getEventDetails:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-GetEventDetailsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HandleContactLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-handleContact:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-HandleContactLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateEventLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-createEvent:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-CreateEventLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteEventLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-deleteEvent:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-DeleteEventLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HandleGoodsDonationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-handleGoodsDonation:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-HandleGoodsDonationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HandleMonetaryDonationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-handleMonetaryDonation:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-HandleMonetaryDonationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTagsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-getTags:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-GetTagsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetEventsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-getEvents:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-GetEventsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://111c3n565m.execute-api.us-west-2.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-game-mixer-backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
        "ExportName": "sls-game-mixer-backend-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "UpdateEventLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-west-2:242201288258:function:game-mixer-backend-dev-updateEvent:4",
        "Description": "Current Lambda function version",
        "ExportName": "sls-game-mixer-backend-dev-UpdateEventLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "AdminLoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-adminLogin",
            "RetentionInDays": 14
          }
        },
        "AdminCreateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-adminCreateUser",
            "RetentionInDays": 14
          }
        },
        "GetCurrentAdminLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getCurrentAdmin",
            "RetentionInDays": 14
          }
        },
        "HandleContactLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleContact",
            "RetentionInDays": 14
          }
        },
        "HandleMonetaryDonationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleMonetaryDonation",
            "RetentionInDays": 14
          }
        },
        "HandleGoodsDonationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-handleGoodsDonation",
            "RetentionInDays": 14
          }
        },
        "VerifyDonationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-verifyDonation",
            "RetentionInDays": 14
          }
        },
        "GetEventsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEvents",
            "RetentionInDays": 14
          }
        },
        "GetEventDetailsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getEventDetails",
            "RetentionInDays": 14
          }
        },
        "GetTagsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-getTags",
            "RetentionInDays": 14
          }
        },
        "CreateEventLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-createEvent",
            "RetentionInDays": 14
          }
        },
        "UpdateEventLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-updateEvent",
            "RetentionInDays": 14
          }
        },
        "DeleteEventLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/game-mixer-backend-dev-deleteEvent",
            "RetentionInDays": 14
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "game-mixer-backend",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/game-mixer-backend-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cognito-idp:AdminInitiateAuth",
                        "cognito-idp:AdminCreateUser",
                        "cognito-idp:AdminSetUserPassword",
                        "cognito-idp:AdminGetUser"
                      ],
                      "Resource": {
                        "Fn::GetAtt": [
                          "AdminUserPool",
                          "Arn"
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:GetItem",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev",
                        "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-dev/index/*",
                        "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev",
                        "arn:aws:dynamodb:us-west-2:242201288258:table/game-mixer-backend-events-dev/index/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ses:SendEmail",
                        "ses:SendRawEmail"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "game-mixer-backend",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "AdminLoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/adminAuthHandler.handleLogin",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-adminLogin",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AdminLoginLogGroup"
          ]
        },
        "AdminCreateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/adminAuthHandler.handleCreateUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-adminCreateUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AdminCreateUserLogGroup"
          ]
        },
        "GetCurrentAdminLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/adminAuthHandler.getCurrentUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-getCurrentAdmin",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetCurrentAdminLogGroup"
          ]
        },
        "HandleContactLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/contactHandler.handler",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-handleContact",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HandleContactLogGroup"
          ]
        },
        "HandleMonetaryDonationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/donationsHandler.handleMonetaryDonation",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-handleMonetaryDonation",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HandleMonetaryDonationLogGroup"
          ]
        },
        "HandleGoodsDonationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/donationsHandler.handleGoodsDonation",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-handleGoodsDonation",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HandleGoodsDonationLogGroup"
          ]
        },
        "VerifyDonationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/donationsHandler.verifyDonation",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-verifyDonation",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "VerifyDonationLogGroup"
          ]
        },
        "GetEventsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/eventsHandler.getEvents",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-getEvents",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetEventsLogGroup"
          ]
        },
        "GetEventDetailsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/eventsHandler.getEventDetails",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-getEventDetails",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetEventDetailsLogGroup"
          ]
        },
        "GetTagsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/eventsHandler.getTags",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-getTags",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetTagsLogGroup"
          ]
        },
        "CreateEventLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/eventsHandler.createEvent",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-createEvent",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateEventLogGroup"
          ]
        },
        "UpdateEventLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/eventsHandler.updateEvent",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-updateEvent",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateEventLogGroup"
          ]
        },
        "DeleteEventLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
              "S3Key": "serverless/game-mixer-backend/dev/1738881164369-2025-02-06T22:32:44.369Z/game-mixer-backend.zip"
            },
            "Handler": "src/handlers/eventsHandler.deleteEvent",
            "Runtime": "nodejs18.x",
            "FunctionName": "game-mixer-backend-dev-deleteEvent",
            "MemorySize": 256,
            "Timeout": 29,
            "Environment": {
              "Variables": {
                "SENDER_EMAIL": "admin@game-mixer.org",
                "TABLE_NAME": "game-mixer-backend-dev",
                "EVENTS_TABLE": "game-mixer-backend-events-dev",
                "COGNITO_USER_POOL_ID": {
                  "Ref": "AdminUserPool"
                },
                "COGNITO_CLIENT_ID": {
                  "Ref": "AdminUserPoolClient"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteEventLogGroup"
          ]
        },
        "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AdminLoginLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AdminCreateUserLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetCurrentAdminLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HandleContactLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HandleMonetaryDonationLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HandleGoodsDonationLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "VerifyDonationLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetEventsLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetEventDetailsLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetTagsLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateEventLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateEventLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteEventLambdaFunction"
            },
            "CodeSha256": "v+/oPMFiv6yvHedICXKUDZrF+dpu+VlrrVCQh0X0Ezo="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "game-mixer-backend-dev",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": "",
            "MinimumCompressionSize": 1024
          }
        },
        "ApiGatewayResourceAdmin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "admin",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAdminLogin": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAdmin"
            },
            "PathPart": "login",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAdminUsers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAdmin"
            },
            "PathPart": "users",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAdminMe": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAdmin"
            },
            "PathPart": "me",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAdminEvents": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAdmin"
            },
            "PathPart": "events",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceAdminEventsIdVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceAdminEvents"
            },
            "PathPart": "{id}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceContact": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "contact",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDonations": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "donations",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDonationsMonetary": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceDonations"
            },
            "PathPart": "monetary",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDonationsGoods": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceDonations"
            },
            "PathPart": "goods",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDonationsVerify": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceDonations"
            },
            "PathPart": "verify",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceEvents": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "events",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceEventsIdVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceEvents"
            },
            "PathPart": "{id}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceEventsTags": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceEvents"
            },
            "PathPart": "tags",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAdminLoginOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAdminUsersOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminUsers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAdminMeOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminMe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodContactOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceContact"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDonationsMonetaryOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDonationsMonetary"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDonationsGoodsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDonationsGoods"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodDonationsVerifyOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceDonationsVerify"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEventsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceEvents"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEventsIdVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceEventsIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodEventsTagsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceEventsTags"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAdminEventsOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminEvents"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAdminEventsIdVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminEventsIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodAdminLoginPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminLogin"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AdminLoginLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AdminLoginLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAdminUsersPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminUsers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "AdminAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AdminCreateUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AdminAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAdminMeGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminMe"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "AdminAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetCurrentAdminLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AdminAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodContactPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceContact"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "HandleContactLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "HandleContactLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDonationsMonetaryPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDonationsMonetary"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "HandleMonetaryDonationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "HandleMonetaryDonationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDonationsGoodsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDonationsGoods"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "HandleGoodsDonationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "HandleGoodsDonationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDonationsVerifyPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDonationsVerify"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "VerifyDonationLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "VerifyDonationLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodEventsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEvents"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetEventsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetEventsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodEventsIdVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEventsIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetEventDetailsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetEventDetailsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodEventsTagsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceEventsTags"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetTagsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetTagsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAdminEventsPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminEvents"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "AdminAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateEventLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AdminAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAdminEventsIdVarPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminEventsIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "AdminAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateEventLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AdminAuthorizerApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodAdminEventsIdVarDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceAdminEventsIdVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "COGNITO_USER_POOLS",
            "AuthorizerId": {
              "Ref": "AdminAuthorizerApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DeleteEventLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AdminAuthorizerApiGatewayAuthorizer"
          ]
        },
        "AdminAuthorizerApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 300,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "adminAuthorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              {
                "Fn::GetAtt": [
                  "AdminUserPool",
                  "Arn"
                ]
              }
            ]
          }
        },
        "ApiGatewayDeployment1738881156512": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodAdminLoginOptions",
            "ApiGatewayMethodAdminUsersOptions",
            "ApiGatewayMethodAdminMeOptions",
            "ApiGatewayMethodContactOptions",
            "ApiGatewayMethodDonationsMonetaryOptions",
            "ApiGatewayMethodDonationsGoodsOptions",
            "ApiGatewayMethodDonationsVerifyOptions",
            "ApiGatewayMethodEventsOptions",
            "ApiGatewayMethodEventsIdVarOptions",
            "ApiGatewayMethodEventsTagsOptions",
            "ApiGatewayMethodAdminEventsOptions",
            "ApiGatewayMethodAdminEventsIdVarOptions",
            "ApiGatewayMethodAdminLoginPost",
            "ApiGatewayMethodAdminUsersPost",
            "ApiGatewayMethodAdminMeGet",
            "ApiGatewayMethodContactPost",
            "ApiGatewayMethodDonationsMonetaryPost",
            "ApiGatewayMethodDonationsGoodsPost",
            "ApiGatewayMethodDonationsVerifyPost",
            "ApiGatewayMethodEventsGet",
            "ApiGatewayMethodEventsIdVarGet",
            "ApiGatewayMethodEventsTagsGet",
            "ApiGatewayMethodAdminEventsPost",
            "ApiGatewayMethodAdminEventsIdVarPut",
            "ApiGatewayMethodAdminEventsIdVarDelete"
          ]
        },
        "AdminLoginLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AdminLoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AdminCreateUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AdminCreateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetCurrentAdminLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetCurrentAdminLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "HandleContactLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HandleContactLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "HandleMonetaryDonationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HandleMonetaryDonationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "HandleGoodsDonationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HandleGoodsDonationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "VerifyDonationLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "VerifyDonationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetEventsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetEventsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetEventDetailsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetEventDetailsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetTagsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetTagsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateEventLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateEventLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateEventLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateEventLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DeleteEventLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteEventLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AdminUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "game-mixer-backend-admin-pool-dev",
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": true
            },
            "Policies": {
              "PasswordPolicy": "<REDACTED>"
            },
            "Schema": [
              {
                "Name": "email",
                "Required": true,
                "Mutable": true,
                "AttributeDataType": "String"
              }
            ]
          }
        },
        "AdminUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "UserPoolId": {
              "Ref": "AdminUserPool"
            },
            "ClientName": "game-mixer-backend-admin-client-dev",
            "GenerateSecret": "<REDACTED>",
            "ExplicitAuthFlows": [
              "ALLOW_ADMIN_USER_PASSWORD_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ]
          }
        },
        "DonationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "game-mixer-backend-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "type",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "contactEmail",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "typeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "type",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "statusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "emailIndex",
                "KeySchema": [
                  {
                    "AttributeName": "contactEmail",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "EventsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "TableName": "game-mixer-backend-events-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "startTime",
                "AttributeType": "S"
              },
              {
                "AttributeName": "tag",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "startTimeIndex",
                "KeySchema": [
                  {
                    "AttributeName": "startTime",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "tagIndex",
                "KeySchema": [
                  {
                    "AttributeName": "tag",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "GatewayResponseDefault5XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_5XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-west-2-ffca5d3a-bc84",
          "Export": {
            "Name": "sls-game-mixer-backend-dev-ServerlessDeploymentBucketName"
          }
        },
        "AdminLoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AdminLoginLambdaVersionDbCPERe7orURLfZXen7jK9m3Z3QdlC3x24eXbfO1OQ"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-AdminLoginLambdaFunctionQualifiedArn"
          }
        },
        "AdminCreateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AdminCreateUserLambdaVersion9LSDEV24J3yXGn5J3lVusOyFECzj8wiX3OC3yXRt8"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-AdminCreateUserLambdaFunctionQualifiedArn"
          }
        },
        "GetCurrentAdminLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetCurrentAdminLambdaVersion5aSFb7o9oQY5Yf9tA4l0nsI9KCieQh9xz8KsTS0wJo"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-GetCurrentAdminLambdaFunctionQualifiedArn"
          }
        },
        "HandleContactLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HandleContactLambdaVersionwezanSb4uuO7ouD1AaCuACdu2ZbpvSYPU61M3NxzDI"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-HandleContactLambdaFunctionQualifiedArn"
          }
        },
        "HandleMonetaryDonationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HandleMonetaryDonationLambdaVersionuSZ9mF2YC25wrZcFpnMVZz465lDa4H3eSdqo6Dk0wc"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-HandleMonetaryDonationLambdaFunctionQualifiedArn"
          }
        },
        "HandleGoodsDonationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HandleGoodsDonationLambdaVersionEZCWGggH6pMfVVeGe0rZIED63c3S1d6isOCVqIWtyR8"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-HandleGoodsDonationLambdaFunctionQualifiedArn"
          }
        },
        "VerifyDonationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "VerifyDonationLambdaVersionsr2O0l8mITe4NqtqMcehxoo5yHUtnMn5z1w7rldK1U"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-VerifyDonationLambdaFunctionQualifiedArn"
          }
        },
        "GetEventsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetEventsLambdaVersion4qPfmmM9VUCSYRHnzMB484iJZ9HXn05S1wNkuxtuYg"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-GetEventsLambdaFunctionQualifiedArn"
          }
        },
        "GetEventDetailsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetEventDetailsLambdaVersionBd27XxYQvhAswNke4B5rt5ZvTS73SOMQ5sur0dGZQ"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-GetEventDetailsLambdaFunctionQualifiedArn"
          }
        },
        "GetTagsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetTagsLambdaVersionhGPMh7a2it5AK3plzZi59c1C5gas1fMkIYD73Ny88"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-GetTagsLambdaFunctionQualifiedArn"
          }
        },
        "CreateEventLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateEventLambdaVersionOx4suc60HVy1HF0KuSq5F8mKg0F89mL5TwvLWa5Ads"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-CreateEventLambdaFunctionQualifiedArn"
          }
        },
        "UpdateEventLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateEventLambdaVersionY1EaPXBhfagdZtEcGPjmz4UxC5TcnmLyXT7a5RurKY"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-UpdateEventLambdaFunctionQualifiedArn"
          }
        },
        "DeleteEventLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteEventLambdaVersion5yYhqZxNYTDOBmuyuq8ieC4TnZm3bBJHHRHWPfMc19c"
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-DeleteEventLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-game-mixer-backend-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}