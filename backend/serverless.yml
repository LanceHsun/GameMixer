service: game-mixer-backend

frameworkVersion: '4'

custom:
  tableName: ${self:service}-${sls:stage}
  eventsTableName: ${self:service}-events-${sls:stage}
  adminUserPoolName: ${self:service}-admin-pool-${sls:stage}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  environment:
    SENDER_EMAIL: ${env:SENDER_EMAIL}
    TABLE_NAME: ${self:custom.tableName}
    EVENTS_TABLE: ${self:custom.eventsTableName}
    COGNITO_USER_POOL_ID: !Ref AdminUserPool
    COGNITO_CLIENT_ID: !Ref AdminUserPoolClient
  logRetentionInDays: 14
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminGetUser
          Resource: !GetAtt AdminUserPool.Arn
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.TABLE_NAME}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.TABLE_NAME}/index/*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.EVENTS_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.EVENTS_TABLE}/index/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  # Admin Auth Functions
  adminLogin:
    handler: src/handlers/adminAuthHandler.handleLogin
    events:
      - http:
          path: admin/login
          method: post
          cors: true

  adminCreateUser:
    handler: src/handlers/adminAuthHandler.handleCreateUser
    events:
      - http:
          path: admin/users
          method: post
          cors: true
          authorizer:
            name: adminAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt AdminUserPool.Arn

  getCurrentAdmin:
    handler: src/handlers/adminAuthHandler.getCurrentUser
    events:
      - http:
          path: admin/me
          method: get
          cors: true
          authorizer:
            name: adminAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt AdminUserPool.Arn

  # Contact Form Handler
  submitContact:
    handler: src/handlers/contactHandler.submitContact
    events:
      - http:
          path: contact
          method: post
          cors: true
    memorySize: 256
    timeout: 29

  # Donation Handlers
  submitMonetaryDonation:
    handler: src/handlers/donationsHandler.handleMonetaryDonation
    events:
      - http:
          path: donations/monetary
          method: post
          cors: true
    memorySize: 256
    timeout: 29

  submitGoodsDonation:
    handler: src/handlers/donationsHandler.handleGoodsDonation
    events:
      - http:
          path: donations/goods
          method: post
          cors: true
    memorySize: 256
    timeout: 29

  # Event Handlers - Public
  getEvents:
    handler: src/handlers/eventsHandler.getEvents
    events:
      - http:
          path: events
          method: get
          cors: true
    memorySize: 256
    timeout: 29

  getEventDetails:
    handler: src/handlers/eventsHandler.getEventDetails
    events:
      - http:
          path: events/{id}
          method: get
          cors: true
    memorySize: 256
    timeout: 29

  getTags:
    handler: src/handlers/eventsHandler.getTags
    events:
      - http:
          path: events/tags
          method: get
          cors: true
    memorySize: 256
    timeout: 29

  # Event Handlers - Admin
  createEvent:
    handler: src/handlers/eventsHandler.createEvent
    events:
      - http:
          path: admin/events
          method: post
          cors: true
          authorizer:
            name: adminAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt AdminUserPool.Arn
    memorySize: 256
    timeout: 29

  updateEvent:
    handler: src/handlers/eventsHandler.updateEvent
    events:
      - http:
          path: admin/events/{id}
          method: put
          cors: true
          authorizer:
            name: adminAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt AdminUserPool.Arn
    memorySize: 256
    timeout: 29

  deleteEvent:
    handler: src/handlers/eventsHandler.deleteEvent
    events:
      - http:
          path: admin/events/{id}
          method: delete
          cors: true
          authorizer:
            name: adminAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt AdminUserPool.Arn
    memorySize: 256
    timeout: 29

resources:
  Resources:
    # Admin Cognito Resources
    AdminUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.adminUserPoolName}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: email
            Required: true
            Mutable: true
            AttributeDataType: String

    AdminUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref AdminUserPool
        ClientName: ${self:service}-admin-client-${sls:stage}
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    # DynamoDB Tables
    DonationsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: type
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: contactEmail
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: typeIndex
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: statusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: emailIndex
            KeySchema:
              - AttributeName: contactEmail
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}

    EventsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.eventsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: startTime
            AttributeType: S
          - AttributeName: tag
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: startTimeIndex
            KeySchema:
              - AttributeName: startTime
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: tagIndex
            KeySchema:
              - AttributeName: tag
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'